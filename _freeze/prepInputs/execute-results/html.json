{
  "hash": "5770205806cd44d657f6e16fe98cbb93",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: \"Eliot McIntire\"\ndate: last-modified\neditor_options:\n  chunk_output_type: console\nexecute:\n  eval: false\n  tidy: false\n  warning: false\n  message: false\n  error: false\n  cache: false\n---\n\n\n# `prepInputs` for bringing data into projects\n\n\n\n\n\nEvery project that has data will need to get the data from its original source into a form and format that works for a given project. To do this in a reproducible/reusable manner is not trivial. \n\nSome elements that should be present when bringing the data into a project in a reproducible/reusable manner can ideally include:\n\n- **Accessible** from any computer\n- **User-access control** (i.e., can allow only some people to get the data)\n- **Versioned** i.e., can know and control the version accessed\n- **Spatially appropriate** -- if data are spatial (e.g., GIS data), they must be coerced to relevant template for a project\n- **Exact**, i.e., test to ensure the data were downloaded as desired\n- **Flexible** for many classes of data\n- **Simple**\n\nSimilar, if the data are to be re-used in many projects, the approach to getting the data should be:\n\n- **Locally cached** if used in many projects, only one copy is needed\n- **Modular** approach to accessing, so they can be easily added to any project\n\nWe designed a function to achieve all this: `[reproducible::prepInputs()]`\n\n## `prepInputs`\n\nThis function can be used to prepare R objects from remote or local data sources.\nThe object of this function is to provide a reproducible version of\na series of commonly used steps for getting, loading, and processing data.\nThis function has two stages: Getting data (download, extracting from archives,\nloading into R) and post-processing (for `Spatial*` and `Raster*`\nobjects, this is crop, reproject, mask/intersect).\nTo trigger the first stage, provide `url` or `archive`.\nTo trigger the second stage, provide `studyArea` or `rasterToMatch`.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}