---
author: "Eliot McIntire"
date: last-modified
execute:
  eval: false
  tidy: false
  warning: false
  message: false
  error: false
editor_options:
  chunk_output_type: console
---

# Introduction to SpaDES Modules {#sec-moduleintro}

::: {.callout-tip appearance="simple"}
See [Barebones R script] for the code shown in this chapter
:::

```{r setup}
#| include: false
#| eval: true
#| purl: false

# truncate text output
hook_output <- knitr::knit_hooks$get("output")

knitr::knit_hooks$set(output = function(y, options) {
  if (!is.null(n <- options$outlines)) {
    y <- xfun::split_lines(y)
    if (length(y) > n) {
      # truncate the output
      y <- c(head(y, n), "....\n")
    }
    y <- paste(y, collapse = "\n")
  }
  hook_output(y, options)
})

if (!require("Require")) {
  install.packages("Require", repos = c("https://predictiveecology.r-universe.dev", getOption("repos")),
                   dependencies = TRUE)
}
```

SpaDES modules are comprised of R code that has metadata and that gets
put into functions. With this in mind, we can start with some simple R
code.

## Some R code to convert

```{r start}
# create some data
x <- rnorm(10)
y <- x + rnorm(10)
# fit a linear model
model <- lm(y ~ x)

# plot the fit
plot(model)
```

Looking at this code above, we can imagine that the first 3 lines are
conceptually different -- *fit a dummy model* -- from the last line --
*visualize it*. Let's put these into 2 "modules", and then run them in
sequence.

## Create a module

We use the `SpaDES.core` function `newModule()` to make a new module.

Step 1 -- move the code to an "init" event. This "init" event is a
convention that SpaDES uses. A module must always have an "init" event.
This is the only code that is "definitely run" in a module.

```{r newModule}
#| eval: true

Require::Require(c("reproducible", "SpaDES.core (>= 2.1.5)"), 
                 repos = c("https://predictiveecology.r-universe.dev", getOption("repos")))

# make a module
nm1 <- "My_linear_model"
modulePath <- "~/SpaDES_book/NewModuleIntro/NewModule"
SpaDES.core::newModule(name = nm1, path = modulePath, open = FALSE,
                       events = list(
                         init = {
                           x <- rnorm(10)
                           y <- x + rnorm(10)
                           # fit a linear model
                           model <- lm(y ~ x)
                         }
                       ))
```

**Keeping objects**

For now, we just say, *if you want to keep an object, assign it to
"sim"*. We will explain this in much more detail later. Here, we want to
keep the `model` that we fit. But we don't care about the `x` and `y`.
So we assign the `model` to `sim`.

```{r}
#| eval: true

# make a module
SpaDES.core::newModule(name = nm1, path = modulePath, open = FALSE,
                       events = list(
                         init = {
                           x <- rnorm(10)
                           y <- x + rnorm(10)
                           # fit a linear model
                           sim$model <- lm(y ~ x)     #  <--------- change to sim$
                         }
                       ))
```

How would we run this "init" event? We use `simInit`, which parses the
code (like loading a library or sourcing a function) then `spades`,
which executes it.

```{r}
#| eval: true

out <- simInit(modules = nm1, paths = list(modulePath = modulePath))
out <- spades(out)
```

We can look at the output:

```{r}
out$model
```

We can also look at "what ran"... or in other words, what was our
workflow. Of course, this will just be one "user-created" event (there
are 4 "SpaDES-created" events ... we may use them later, ignore for now)

```{r}
completed(out)
```

We have our first "simple workflow"! 1 chunk of code :)

### Add a second module

Our next step is to divide the pieces into conceptual chunks. Let's now
create a new module for the `plot` ... a "visualization module".

```{r newModule2}
nm2 <- "visualize"
SpaDES.core::newModule(nm2, path = modulePath, open = FALSE,
                       events = list(
                         init = {
                           plot(sim$model)
                         }
                       )
)
```

And now we run both together. We name them both in the `module`
argument. We are using `simInitAndSpades` which is a shortcut to running
the two functions separately.

```{r}
out2 <- simInitAndSpades(module = c(nm1, nm2), paths = list(modulePath = modulePath))
```

We can look at the output again:

```{r}
out2$model

completed(out2)
```

This time, there is an extra event that happened. **We now have a
workflow of 2 events.**

## Try on your own

1.  Make a new module. Make it really simple. Run it with
    `simInitAndSpades` as in the above examples.

```         
-   Use `sim$` for an object that will be outputted.
```

2.  Make a second new module that uses the `sim$` object.

```         
-   Add another new object in `sim$`
```

3.  Make a third new module that uses the `sim$` object from the 2nd
    module.

## See also

[`simList`
accessors](https://rdrr.io/cran/SpaDES.core/man/simList-accessors-events.html)

[`?simInitAndSpades`](https://rdrr.io/cran/SpaDES.core/man/simInitAndSpades.html)

[`?newModule`](https://rdrr.io/cran/SpaDES.core/man/newModule.html)

## Barebones R script

```{r}
#| eval: true
#| echo: false
#| purl: false

fileName <- file.path("R/Chapter_scripts", sub("rmarkdown", "R", knitr::current_input()))
```

```{r file = fileName}
#| eval: false
#| echo: true
#| purl: false

```
