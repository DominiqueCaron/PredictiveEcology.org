---
author      : "Eliot McIntire"
date        : last-modified
editor_options:
  chunk_output_type: console
execute:
  eval: false
  tidy: false
  warning: false
  message: false
  error: false
  cache: true
---

# The `simList` - What is it? {#sec-simlist}

::: {.callout-tip appearance="simple"}
See [Barebones R script] for the code shown in this chapter
:::

In `R`, there is a default environment, called the `.GlobalEnv`. When
you start typing in R and you create an object, it is "put" in the
`.GlobalEnv`

```{r}
# this is in the .GlobalEnv
a <- 1
environment()
```

This `.GlobalEnv` is convenient to begin in R, but it quickly becomes
limiting. We need more places to put objects, and we need a way to be
more in control of the things that we want to keep, share, modify etc.
In `SpaDES`, this place is called the `simList`. It is a rich data
object that acts like a list or an environment, i.e., we can put objects
into it and use them later.

```{r simListCreate}
#| eval: true
#| results: false
sim <- simInit()
sim$a <- 1
sim$b <- sim$a + 2
sim$b
envir(sim)
```

```{r simListCreate2, message = FALSE, echo = FALSE}
sim <- SpaDES.core::simInit()
sim$a <- 1
sim$b <- sim$a + 2
sim$b
envir(sim)
```

::: {.callout-tip appearance="simple"}
## `simList` is an `environment`

The name `simList` has the word "list" in it, but it is actually an
`environment`

```{r}
sim <- simInit()
is(sim, "environment")
# [1] TRUE
```
:::

::: {.callout-tip appearance="simple"}
## `simNew <- sim` doesn't copy

If you don't know what an `environment` is in `R`, it is OK. The most
important feature of an `environment` is that it employs
`pass-by-reference`, which means it is not copied when it is "assigned"
somewhere. This makes `SpaDES` fast enough to use for huge workflows.

```{r,eval=FALSE}
sim <- simInit()
sim$a <- 1
simNew <- sim
simNew$a <- 2

# what value will this have?
sim$a
```
:::

## Where does `simList` come from?

There is only 1 way in `SpaDES.core` to create a `simList`:

-   using
    [`simInit()`](https://rdrr.io/cran/SpaDES.core/man/simInit.html)
    creates a `simList` object.

## How can we specify a `simList`?

A `simList` object is simply a structured data type containing various
elements.

The main components of a `simList` are:

1.  A list of modules used;
2.  The event queue;
3.  A description of the data (object) dependencies.

## How `SpaDES` works: simLists

We can examine the `simList` object structure in the usual R fashion by
printing (`show`ing) it, or by using `str()`:

```{r simlist-structure}
emptySim <- simInit()
emptySim  # same as show(emptySim)
str(emptySim)
```

**NOTE:** `simList`s are S4 objects, so we can use `getSlots()` and
`slotNames()` to examine the object.

See also
[`?'.simList-class'`](https://rdrr.io/cran/SpaDES.core/man/simList-class.html)

## Accessing the parts of a simLists

::: columns-2
```{r simList-accessors}
#| include: false
#| purl: false

emptySim <- simInit()
slots <- paste0(slotNames(emptySim))
accessors <- c("modules", "params", "events", "current", "completed", "depends",
               "times", "inputs", "outputs", "paths", "envir", "objects") |>
  paste0("()")
data.frame(slot = slots, accessor = accessors) |>
  knitr::kable(format = "html", padding = 0)
```

```{r simList-accessors2}
#| include: false
#| purl: false

other_accessors <- c("packages", "globals", "start", "end", "timeunit", "timeunits",
                     "paths", "cachePath", "inputPath", "outputPath", "modulePath") |>
  paste0("()")
data.frame(other_accessors = other_accessors) |>
  knitr::kable(format = "html", padding = 0)
```
:::

::: {.callout-note appearance="simple"}
::: {layout="[ 60, 40 ]"}
::: {#first-column}
The `simList` can be imagined as a file cabinet where all the simulation
details and objects (i.e. the parameters, inputs and outputs declared by
each module) are stored neatly and in an easily accessible way.
:::

::: {#second-column}
![](assets/img/simListScheme.png){width="300"}
:::
:::
:::

## Model specification

Simple examples (using demo modules) of `simInit()` and `spades()`
calls.

-   examine `simList` structure before and after the `spades()` call

### Initialize an empty `simList` object

```{r empty-simList}
#| eval: true

emptySim <- simInit()
```

```{r empty-simList2, eval = TRUE, echo = FALSE}
emptySim <- SpaDES.core::simInit()
```

### Inspect the empty `simList` object

1.  What are the names of each of the slots in the simList?
2.  What do each of these slots contain? Hint: see
    [`?.simList-class`](https://rdocumentation.org/packages/SpaDES.core/versions/2.0.5/topics/simList-class)

```{r inspect-emptySim}
str(emptySim)
slotNames(emptySim)
getSlots('simList')
?'.simList-class'
```

### Inspect the new `simList` object

Use the `simList` accessor functions to determine the following:

1.  the modules included in the simulation and their package
    dependencies;

2.  the global parameter values used;

3.  the module-specific parameter values used;

4.  the simulation start and end times;

5.  the timeunits used by the modules in the simulation;

6.  the scheduled and completed event queues;

7.  the objects (functions, data, etc.) used in the simulation;

8.  the file paths used for simulation inputs and outputs.

```{r inspect-simList, eval=FALSE}
# Get the sample modules that come with SpaDES.core
library(SpaDES.core)
modulePath <- SpaDES.core::getSampleModules(tempdir())
# options(spades.loadReqdPkgs = FALSE) # we don't need to check for packages in this example
mySim <- simInit(modules = dir(modulePath[1:3]), paths = list(modulePath = modulePath))

# list modules used in the simulation
modules(mySim)

# list module dependencies and packages used
depends(mySim)
packages(mySim)

# list global and module-specific param values
params(mySim)
P(mySim)       ## bonus: how do params() and P() differ?

# list start and end times
times(mySim)
start(mySim)
end(mySim)

# get the simulation and module timeunits
timeunit(mySim)
timeunits(mySim)

# get the scheduled and completed event queues
events(mySim)
completed(mySim)

# list the objects (functions, data, etc.) stored in the simList
objects(mySim)

# list the file paths used in the simulation
paths(mySim)
inputPath(mySim)
outputPath(mySim)
```

### Run the simulation

```{r run-sim,eval=FALSE}
dev()
mySimOut <- Copy(mySim) ## make a deep copy of the simList
mySimOut <- spades(mySimOut)
```

### Compare the simList before and after

```{r compare-sims}
times(mySim)
times(mySimOut)

objects(mySim)
objects(mySimOut)
```

## See also

[Environments - Advanced R](http://adv-r.had.co.nz/Environments.html)

[`?.simList-class`](https://rdocumentation.org/packages/SpaDES.core/versions/2.0.5/topics/simList-class)

[`?simInit`](https://rdocumentation.org/packages/SpaDES.core/versions/2.0.5/topics/simInit)

[`?spades`](https://rdocumentation.org/packages/SpaDES.core/versions/2.0.5/topics/spades)

## Barebones R script

```{r}
#| eval: true
#| echo: false
#| purl: false

fileName <- file.path("R/Chapter_scripts", sub("rmarkdown", "R", knitr::current_input()))
```

```{r file = fileName}
#| eval: false
#| echo: true
#| purl: false

```
