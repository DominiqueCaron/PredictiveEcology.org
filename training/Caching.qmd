---
title: "Introduction to Cache"
author:
  - "Eliot J. B. McIntire"
date: '`r strftime(Sys.Date(), "%B %d %Y")`'
execute:
  echo: true
  eval: true
  cache: false
  tidy: false
  warning: false
  message: false
  error: false
editor_options:
  chunk_output_type: console
---

```{r setup, include = FALSE}
#| cache: true
SuggestedPkgsNeeded <- c("terra")
hasSuggests <- all(sapply(SuggestedPkgsNeeded, require, character.only = TRUE, quietly = TRUE))
useSuggests <- !(tolower(Sys.getenv("_R_CHECK_DEPENDS_ONLY_")) == "true")

knitr::opts_chunk$set(eval = hasSuggests && useSuggests)
```

# Reproducible workflow

The objective of a reproducible workflow is is likely that an entire
work flow from raw data to publication, decision support, report
writing, presentation building etc., could be built and be reproducible
anywhere, on any computer, operating system, with any starting
conditions, on demand.

As part of a reproducible workflow, caching of function calls, code
chunks, and other elements of a project can be very valuable. Caching
allows a code writer to run all code regularly without "secretly"
skipping certain lines because they take too long to run. This has 2
benefits.

1.  Each line gets run regularly so when failures crop up, they are
    detected quickly and can be fixed when they are introduced.
2.  Running code "somewhere else" (different machine, person, operating
    system) will be more likely to work on an ongoing basis, i.e., it
    will help maintain a "reproducible" state.

These benefits allow code to be constantly in a state of functioning,
from start to finish, which lowers the effort "at the end" to make all
the work reproducible.

The `reproducible::Cache` function is built to work with many R
functions, including *some* that are used for their side effects or that
use pointers (e.g., a `terra` `SpatRaster`) instead of regular R
objects.

# How to use `Cache`

The `Cache` function can be used with any function. A user can wrap it
around another function call or use the base pipe operator `|>`. The
following two calls are the same, and thus the 2nd one will result in
the identical output to the first:

```{r simpleFunctions}
#| cache: true
library(reproducible)
reproducible::Cache(rnorm(1))

rnorm(1) |>
  reproducible::Cache()
```

See `?reproducible::Cache` for many more examples.

# When to use `Cache`

The most obvious case to use `Cache` is when the calculation is
expensive. For example, GIS operations are commonly time consuming. In
the example below, we will use `terra::project` three times, with
timings.

### From disk

```{r function-level}
# Data setup
library(terra)
tmpDir <- file.path(tempdir(), "reproducible_examples", "Cache")
dir.create(tmpDir, recursive = TRUE)
x <- y <- 2001
ras <- terra::rast(terra::ext(0, x, 0, y), vals = sample(1:(x*y)), res = 1)
terra::crs(ras) <- "+proj=lcc +lat_1=48 +lat_2=33 +lon_0=-100 +datum=WGS84"
newCRS <- "+init=epsg:4326" # A longlat crs

# Call slow operation: project
# No Cache
system.time(map1 <- terra::project(ras, newCRS)) # Warnings due to new PROJ

# With Cache -- a little slower the first time because saving to disk
system.time(map2 <- terra::project(ras, newCRS) |> Cache())

# faster the second time; improvement depends on size of object and time to run function
system.time(map3 <- terra::project(ras, newCRS) |> Cache())
```

### From disk and memory

We can set an option so that objects will also be saved to disk as
normal, but they will also be saved as RAM objects -- "memoising".

```{r memoise}
optOrig <- options("reproducible.useMemoise" = TRUE)
system.time(map4 <- terra::project(ras, newCRS) |> Cache())

system.time(map5 <- terra::project(ras, newCRS) |> Cache())
options(optOrig)
```

## Caching examples

### Basic cache use with tags

We can add tags to identify the Cache call.

```{r tags}
ranNumsA <- Cache(rnorm, 4, userTags = c("random number generator"))

showCache(userTags = "random number generator")
```

## Clean up cache

We can use either `clearCache`, `keepCache`, or `cc` to remove things
from the `Cache` database. `clearCache` removes everything that matches
the query. `keepCache` keeps everything that matches the query. `cc`
removes the most recent entry (i.e., it is a shorthand for a commonly
used option).

```{r keepCache}
# Two different funcxtions
a <- rnorm(1) |> Cache()
b <- runif(1) |> Cache()

# Clear only the first one
clearCache(userTags = "rnorm", ask = FALSE)
a2 <- rnorm(1) |> Cache()
b2 <- runif(1) |> Cache()

# b2 and b are still identical; a and a2 are not
a == a2 # FALSE
b == b2 # TRUE

# This time keep ONLY the rnorm
keepCache(userTags = "rnorm", ask = FALSE)
a3 <- rnorm(1) |> Cache()
b3 <- runif(1) |> Cache()

# b2 and b are still identical; a and a2 are not
a2 == a3 # TRUE
b2 == b3 # FALSE
```

## Nested Caching

Nested caching, which is when Caching of a function occurs inside an
outer function, which is itself cached. This is a critical element to
working within a reproducible work flow. Ideally, at all points in a
development cycle, it should be possible to get to any line of code
starting from the very initial steps, running through everything up to
that point, in less than a few seconds. If the workflow can be kept very
fast like this, it will be very likely to work at any point it is
tested.

In the example here, we run an `outer` function that calls an `inner`
function. If we decide to change the `outer` function along the way, and
the `inner` function is unaffected, then we can still recover the cached
version of the `inner` call.

*Warning* this will not necessarily work the other way, i.e., if `inner`
is changed, we won't notice until we `clearCache` and rerun.

```{r nested}
# Make 2 functions
inner <- function(mean) {
  d <- 1
  Cache(rnorm(3, mean = mean))
}
outer <- function(n) {
  Cache(inner(0.1))
}

# Call outer function
Cache(outer(n = 2))

# Change outer function
outer <- function(n) {
  a <- 0.1
  Cache(inner(a))
}

# Still recovers inner 
Cache(outer(n = 2))

# BUT if we change the inner, it won't work
inner <- function(mean) {
  d <- 2                        # Changed d
  Cache(rnorm(3, mean = mean))
}
Cache(outer(n = 2))
```

# Best practices

In general, we have found that use of `Cache` to be beneficial when used
as following:

1.  Slow functions get cached. "Slow" can be "slower than using `Cache`"
2.  Regularly `clearCache(ask = FALSE)`, e.g., at the end of a day or
    week of work, then let it run.

Some of our team regularly add:

3.  If using SpaDES, use cache at the event level, if the event is
    non-stochastic

<!-- NEVER CACHE SIMINIT()-->
