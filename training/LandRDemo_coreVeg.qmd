---
title: "LandR workflow with `setupProject`"
author: "Ceres Barros"
date: last-modified
editor_options:
  chunk_output_type: console
bibliography: references/references.bib
execute:
  tidy: false
  warning: false
  message: false
  error: false
  cache: true
---

```{r setup}
#| include: false
#| cache: false

knitr::opts_chunk$set(tidy = FALSE, 
                      warning = FALSE, 
                      message = FALSE, 
                      error = FALSE)

## truncate text output
hook_output <- knitr::knit_hooks$get("output")

knitr::knit_hooks$set(output = function(x, options) {
  if (!is.null(n <- options$outlines)) {
    x <- xfun::split_lines(x)
    if (length(x) > n) {
      # truncate the output
      x <- c(head(x, n), "....\n")
    }
    x <- paste(x, collapse = "\n")
  }
  hook_output(x, options)
})

if (Sys.getenv("USERNAME") == "GHA") {
  googledrive::drive_auth(path = Sys.getenv("GOOGLE_APP_CREDENTIALS"))
}

qmdPath <- normalizePath(getwd(), winslash = "/")

if (!interactive()) { 
  dir.create("~/SpaDES_book/LandRDemo_coreVeg", recursive = TRUE)
  knitr::opts_knit$set(root.dir = "~/SpaDES_book/LandRDemo_coreVeg")
}
```

::: {.callout-note appearance="simple"}
*2 hours -- estimated time for 1st time executing (includes downloads)*

*20Gb RAM -- estimated peak RAM for executing*

*20Gb disk -- estimated hard drive allocation*
:::

[LandR](https://landr-manual.predictiveecology.org/) is a forest
landscape model implemented as a collection of `SpaDES` modules in R. It
is a reimplementation of LANDIS-II Biomass Succession Extension v.3.2.1,
which at its core is very similar to v7. See the [LandR
Manual](https://landr-manual.predictiveecology.org/), @barros2023 and
@scheller2015 for full details about forest dynamics simulated in LandR.

LandR fully open-source and users are expected to use, modify it and
expand it (e.g. by creating new modules) as they see fit, as long has
modifications are adequately reported. We hope that new modules are
shared with others in the LandR community of users so that all can
benefit.

Each LandR module is hosted in its own GitHub repository. When using and
developing LandR modules, note that modules should be semi-independent.
This is, they should be able to run error-free on their own, even they
don't produce useful outputs in this way. A good example are the "data
preparation" and "data calibration" modules *Biomass_speciesData* and
*Biomass_borealDataPrep* which can run on their own but will not produce
any forest landscape simulations, only the input objects and parameters
that *Biomass_core* (the "simulation module") needs.

In this example, we will setup the workflow published in @barros2023
using `setupProject` from the
[`SpaDES.project`](https://spades-project.predictiveecology.org/)
package and current versions of the LandR modules.

::: {#imp-gdrive .callout-important}
## Google account needed for this example

You need to have a Google account to access some of the data using the
`googledrive` R package (part of the `tidyverse` family)[^1].

During the `simInit()` (or `simInitAndSpades()`) call R will prompt you
to either choose a previously authenticated account (if you have
previously used `googledrive`) or to open a browser window and
authenticate. Make sure you give `tidyverse` read/write access to your
files:

```{r fig-gdriveauth}
#| echo: false
#| fig-align: center
#| fig-width: 5

figPath <- normalizePath(file.path(qmdPath, "assets/img/gdriveauth.png"),
                winslash = "/")

knitr::include_graphics(figPath, rel_path = FALSE, dpi = NA)
```

We will eventually transition to *not* hosting data on Google. Until
then, our apologies for any inconvenience.
:::


## All the steps of an ecological modelling project in a continuous workflow

## Workflow setup

```{r setupProject}
#| results: hide
#| cache: false 

repos <- c("predictiveecology.r-universe.dev", getOption("repos"))
# install.packages(c("SpaDES.project"), repos = repos, dependencies = TRUE)
remotes::install_github("PredictiveEcology/SpaDES.project@development")
library(SpaDES.project)

out <- setupProject(
  ## INPUT OBJECTS -----------------------------------
  ## these need to come *before* any formal arguments, as they are needed for params.R
  sppEquivCol = "Boreal",
  vegLeadingProportion = 0,
  successionTimestep = 10L,
  eventCaching = c(".inputObjects", "init"),
  useParallel = FALSE,
  paths = list("packagePath" = "packages/",
               "projectPath" = "~/SpaDES_book/LandRDemo_coreVeg"),
  packages = c(
    ## these are needed but don't load
    "PredictiveEcology/SpaDES.experiment@development (HEAD)",
    "terra"  
  ),
  options = list(
    "reproducible.destinationPath" = paths$inputPath,
    "spades.inputPath" = paths$inputPath,
    "spades.moduleCodeChecks" = FALSE,
    "repos" = repos
  ),
  modules = c(
    "PredictiveEcology/Biomass_speciesData@main",
    "PredictiveEcology/Biomass_borealDataPrep@main",
    "PredictiveEcology/Biomass_speciesParameters@main",
    "PredictiveEcology/Biomass_core@development",
    "PredictiveEcology/Biomass_validationKNN@main"
  ),
  overwrite = TRUE,
  ## SIMULATION SETUP ------------------------------------
  times = list(start = 2001, end = 2031),
  params = "PredictiveEcology/PredictiveEcology.org@training-book/tutos/LandRDemo_coreVeg/params.R",
  ## (more) INPUT OBJECTS -----------------------------------
  ## these come after, so that we don't need to pre-install/load LandR
  ## species lists/traits
  sppEquiv = {
    data("sppEquivalencies_CA", package = "LandR")
    sppEquivalencies_CA[grep("Pin", LandR), `:=`(EN_generic_short = "Pine",
                                                 EN_generic_full = "Pine",
                                                 Leading = "Pine leading")]
    sppEquivalencies_CA[grep("Betu_pap", LandR), `:=`(EN_generic_short = "Birch",
                                                      EN_generic_full = "Birch",
                                                      Leading = "Birch leading")]
    ## all Popu will be merged
    sppEquivalencies_CA[grep("Popu_", LandR), `:=`(EN_generic_short = "Poplar",
                                                   EN_generic_full = "Poplar",
                                                   Leading = "Poplar leading")]
    sppEquivalencies_CA[grep("Popu_", LandR), Boreal := "Popu_Spp"]
    
    ## define spp column to use for model
    sppEquivalencies_CA <- sppEquivalencies_CA[!"", on = sppEquivCol]
    sppEquivalencies_CA <- na.omit(sppEquivalencies_CA, sppEquivCol)
    sppEquivalencies_CA
  },
  speciesParams = {
    list(
      "shadetolerance" = list(
        Betu_Pap = 1
        , Lari_Lar = 1
        , Pice_Gla = 2
        , Pice_Mar = 3
        , Pinu_Ban = 1.5
        , Popu_Spp = 1
      )
    )
  },
  studyArea = {
    originalcrs <- "+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"
    Biomass_corecrs <- "+proj=lcc +lat_1=49 +lat_2=77 +lat_0=0 +lon_0=-95 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"
    
    smallExtent <- c(xmin = -104.757, xmax = -104.48835, ymin = 55.68663, ymax = 55.94491)
    studyAreaS <- terra::vect(terra::ext(smallExtent))
    studyAreaS <-  terra::vect(terra::geom(studyAreaS), "polygons", crs = originalcrs, atts = data.frame(id = 1:length(studyAreaS)))
    studyAreaS <- terra::project(studyAreaS, Biomass_corecrs)
    studyAreaS
  },
  studyAreaLarge = {
    originalcrs <- "+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"
    Biomass_corecrs <- "+proj=lcc +lat_1=49 +lat_2=77 +lat_0=0 +lon_0=-95 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"
    largeExtent <- c(xmin = -104.757, xmax = -104.2197, ymin = 55.68663, ymax = 56.20319)
    
    studyAreaL <- terra::vect(terra::ext(largeExtent))
    studyAreaL <-  terra::vect(terra::geom(studyAreaL), "polygons", crs = originalcrs, atts = data.frame(id = 1:length(studyAreaL)))
    studyAreaL <- terra::project(studyAreaL, Biomass_corecrs)
    studyAreaL
  }
)
```

If you have a look at @sec-castorSetup in the @sec-castorEg chapter, you
will see some differences in the way we setup the two workflows:

-   `paths`. Here we left the defaults for all paths (see
    [`?setupPaths()`](https://spades-project.predictiveecology.org/reference/setup.html)
    for the list of path options) except for the project location
    (`projectPath`) and the location of the package library
    (`packagePath`, which will be placed inside `projectPath`).

-   `options`. We also set a couple of "global options" that determine
    the where data will be downloaded to
    ("reproducible.destinationPath"). This will be the same as the
    default directory to look for inputs ("spades.inputPath"). Notice
    how we used `paths$` to get these directory paths from the `paths`
    object that `setupProject` creates (based on the `paths` argument
    above) prior to setting the options.

-   other arguments (`...`). Almost all other arguments in the call
    above were passed to `...`. These are objects that need to be
    supplied by the user for these modules (e.g. `studyArea` and
    `studyAreaLarge`) or whose defaults we want to override (e.g., the
    species table, `sppEquiv`, and trait values, `speciesParams`). To
    avoid creating them on the `.GlobalEnv` first, we take advantage of
    `setupProject`'s ability to run the code in `{ }` and make these
    polygons. Note that these arguments are passed prior to any 'formal
    arguments' (see
    [`?formalArgs()`](https://www.rdocumentation.org/packages/methods/versions/3.6.2/topics/methodUtilities))

## Run simulation

### One replicate

Before running the simulation we need to exclude the
*Biomass_validationKNN* module. This module validates simulation outputs
agains data and therefore can only be run *after* the simulation is
complete.

We will initialize the simulation with `SpaDES.core::simInit()` so that
we can use the same `simList` object in @sec-LandRReplication.

Please note that it may take over an hour to download all necessary raw
data and fit model parameters.

```{r runSim}
#| eval: false
#| results: hide

## remove validation module, can only be run after simulation's done
out$modules <- out$modules[out$modules != "Biomass_validationKNN"]  

## initialise then run simulation 
options("LandR.assertions" = TRUE)
simInitOut <- SpaDES.core::simInit2(out)
simOut <- SpaDES.core::spades(simInitOut)
```

Or use `simInitAndSpades2()`

```{r runSim2}
#| eval: false
#| results: hide

## remove validation module, can only be run after simulation's done
out$modules <- out$modules[out$modules != "Biomass_validationKNN"]  

simOut <- SpaDES.core::simInitAndSpades2(out)
```


#### Turn plotting on *after* setting up the workflow

We can change parameters and re-run the simulation to, e.g., activate
live plotting in *Biomass_core*, without having to

-   change the parameter provided to `setupProject`

-   repeat the `setupProject` call

Note that because `simOut` is actually a copy of `simInitOut` (see the
output of `SpaDES.core::completed(simInitOut)`), this still means that
`simInitOut` has to be re-generated for this purpose, otherwise `spades`
would try to resume the simulation from the "last year".

Thanks to internall caching, it will only take seconds to "redo"
`simInitOut`. You will also notice that `init` events are retrieved from
cache, this time around.

```{r runSim}
#| eval: false
#| cache: false 

simInitOut <- SpaDES.core::simInit2(out)
simOut <- SpaDES.core::spades(simInitOut, debug = "init")
```




### Many replicates {#sec-LandRReplication}

## Try on your own

Try passing a different set of study areas and re-run the workflow. For instance:

```{r}
## studyArea could be

## studyAreaLarge

```

-   Noticed any differences (speed, cache IDs, ...)?


[^1]: See
    [`?googledrive::drive_auth`](https://rdrr.io/cran/googledrive/man/drive_auth.html)
    for more information.
