---
author      : "Eliot McIntire"
date        : last-modified
editor_options:
  chunk_output_type: console
execute:
  tidy: false
  warning: false
  message: false
  error: false
  cache: true
  eval: true
  results: hide
---

# Module Inputs {#sec-moduleinputs}

::: {.callout-tip appearance="simple"}
See [Barebones R script] for the code shown in this chapter
:::

```{r setup}
#| include: false
#| purl: false

knitr::opts_chunk$set(tidy = FALSE, 
                      eval = FALSE,
                      warning = FALSE, 
                      message = FALSE, 
                      error = FALSE)

## truncate text output
hook_output <- knitr::knit_hooks$get("output")

knitr::knit_hooks$set(output = function(y, options) {
  if (!is.null(n <- options$outlines)) {
    y <- xfun::split_lines(y)
    if (length(y) > n) {
      # truncate the output
      y <- c(head(y, n), "....\n")
    }
    y <- paste(y, collapse = "\n")
  }
  hook_output(y, options)
})

```

We have seen functions called `.inputObjects` and
`reproducible::prepInputs` that help deal with module inputs ([Inputs
Tip @tip-Inputs]). We will show these used within a SpaDES module.

::: {#tip-Inputs .callout-tip}
The **inputs** of a SpaDES module can be any R object, and should be
specified in the `inputObjects` section of the metadata if it is needed
for the module to run. All inputs should be used in the `sim` using
e.g., `sim$` somewhere in the module.
:::

## How to supply **Inputs**

There are several ways to get objects into the `simList`:

-   User passes during `simInit`:

-   using the `objects` argument (if it is an object);

-   using the `inputs` argument (if it is from disk);

-   using the `params` argument;

-   Developer creates defaults and specifies them in `defineParameter()`
    and `.inputObjects`;

-   A different module creates them prior to the running of this module.

Ultimately, it is the last of these that is the power of SpaDES. i.e.,
modularity.

### During `simInit`

A user can directly pass **objects** into the `simInit` and these will
be put into the `simList`

```{r duringSimInit1}
a <- 1
sim <- SpaDES.core::simInit(objects = list(a = a))
sim$a
```

or do pass them via an `.rds` file

```{r duringSimInit2}
b <- 1
tf <- tempfile(fileext = ".rds")
saveRDS(b, file = tf)
sim <- SpaDES.core::simInit(inputs = data.frame(object = "b", file = tf))
sim$b
```

Because parameters are usually module-specific, and need to be passed to
with reference to a module. "Global" parameters are the exception to
this rule:

```{r duringSimInit3}
c <- 1
sim <- SpaDES.core::simInit(params = list(.globals = list(c = c)))
SpaDES.core::params(sim)$.globals$c
```

To pass parameters to a module, we go back to out simple module and make
a minor change:

```{r}
nm1 <- "My_linear_model"
modulePath <- "~/SpaDES_book/NewModuleIntro/NewModule"
SpaDES.core::newModule(name = nm1, path = modulePath, open = FALSE,
                       events = list(
                         init = {
                           x <- rnorm(P(sim)$length)
                           y <- x + rnorm(P(sim)$length)
                           # fit a linear model
                           model <- lm(y ~ x)
                         }
                       ))
```

Now we open `My_linear_model.R` and add the following

```{r}
#| eval: false
#| purl: false

defineParameter("length", "integer", 10L, 5L, 100L,
                "Number of values to generate")
```

... to the module metadata section for parameters. Remember to **save
the file** after you're done.

```{r}
#| eval: false
#| purl: false
 
defineModule(
  <...>
    parameters = bindrows(
      ## here
      <...>
    )
  <...>
)

```

Now run the the module:

```{r}
#| eval: false

out2 <- SpaDES.core::simInitAndSpades(modules = nm1,
                         paths = list(modulePath = modulePath))
params(out2)   ## can you find the length parameter?
```

Notice how `params = list("My_linear_model" = list(length = 20))` has
`"My_linear_model"`, not `nm1`. this is because `list()` does not accept
objects as "names".

### `.inputObjects`

For every **Input** that is specified in the metadata, the module
developer has the option of specifying a default. In R, functions can be
given defaults when they are defined like this:

```{r functionDefault}
rnormMean5 <- function(n = 1) { # the n = 1 is the default value
  rnorm(n = n, mean = 5)
}
rnormMean5() # can be run without any arguments
```

This works for only the simplest cases. In the case of a module, objects
can be arbitrarily complicated and so this approach will not be
suitable.

Instead, there is a function that is called every time a module is
initialized (i.e. by `simInit()`) where a developer can put anything
they want to specify as defaults. It is generally most useful to use
`if (!SpaDES.core::suppliedElsewhere("obj", sim))` i.e., if the object
isn't in `sim`, then give it a value.

```{r example}
#| eval: false
#| purl: false

.inputObjects <- function(sim) {
  
  if (!suppliedElsewhere("y", sim)) {
    sim$y <- rnorm(100)
  }
  
  return(sim)
}
```

#### Advanced `.inputObjects` example

In the Biomass_core module (this is an implementation of the LANDIS-II
Biomass Succession Extension v3.2), there are many **Inputs** as defined
in the *metadata*. The module needs each one of these to work.

The developers have created a `.inputObjects` function that will fill in
these **Inputs** with defaults if the user hasn't supplied them (using
`!SpaDES.core::suppliedElsewhere()`).

We will look at a few examples in this module:
[Biomass_core::.inputObjects](https://github.com/PredictiveEcology/Biomass_core/blob/d5c214b69f35e7a9f57c59ca7d08329b49328e86/Biomass_core.R#L1964).

1.  some [GIS tests that evaluate whether 2 objects are in the same
    CRS](https://github.com/PredictiveEcology/Biomass_core/blob/d5c214b69f35e7a9f57c59ca7d08329b49328e86/Biomass_core.R#L2052)
    (i.e., they need to be the same projection, etc., for this module to
    work)

2.  if an object is missing, [it may make sense to fill in the details
    with parameters from the
    Internet](https://github.com/PredictiveEcology/Biomass_core/blob/d5c214b69f35e7a9f57c59ca7d08329b49328e86/Biomass_core.R#L2066).

3.  an object called `studyArea`. [The developer tests whether it exists
    and creates an error if it does not
    exist](https://github.com/PredictiveEcology/Biomass_core/blob/d5c214b69f35e7a9f57c59ca7d08329b49328e86/Biomass_core.R#L1972).

## Questions

1.  In `.inputObjects`, why don't we just write `if (!is.null(sim$y))`?
    See
    [`?SpaDES.core::suppliedElsewhere`](https://rdrr.io/cran/SpaDES.core/man/suppliedElsewhere.html)

    -   It turns out that other modules may create this object "after"
        this module is run, and this test will fail.

## Try on your own

-   Using the *My_linear_model* shown above, try running simulations
    where you pass different values to the `length` parameter

    -   Tip: have a look at the `params` argument of
        `SpaDES.core::simInitAndSpades()`

## See also

[`?SpaDES.core::expectsInputs`](https://rdrr.io/cran/SpaDES.core/man/expectsInputs.html)

[`?SpaDES.core::suppliedElsewhere`](https://rdrr.io/cran/SpaDES.core/man/suppliedElsewhere.html)

[`?SpaDES.core::defineParameter`](https://rdrr.io/cran/SpaDES.core/man/defineParameter.html)

[`?SpaDES.core::simInit`](https://rdrr.io/cran/SpaDES.core/man/simInit.html)

[`?SpaDES.core::simInitAndSpades`](https://rdrr.io/cran/SpaDES.core/man/simInitAndSpades.html)


## Barebones R script

```{r}
#| eval: true
#| echo: false
#| purl: false

fileName <- file.path("R/Chapter_scripts", sub("rmarkdown", "R", knitr::current_input()))
```

```{r file = fileName}
#| eval: false
#| echo: true
#| purl: false

```
