---
author:
  - "Eliot McIntire"
date: last-modified
editor_options:
  chunk_output_type: console
---

# Pre-installing R packages for book

The objective of this book is to facilitate lightweight project code and
setting up R^3^T workflows[^1]. To do this, packages and any code that
are used must be easy to install and use. We accomplish this by having
each chapter installing its own packages, and avoiding having users
"pre-installing" packages.

Furthermore, packages, once installed for one project, will be cached
locally so that the next project will be able to install quickly from
the local package cache. We have also attempted to allow all sections to
be run without administrator privileges.

Nonetheless, there might be situations where users of this book will
need to pre-install packages in one go â€“ e.g., they will run chapter
code without internet access. The following instructions are meant to
cover this use case.

## Installation code

If you can run the following code, then you will be able to run code in
any of the chapters in this book. This code begins by installing
`SpaDES.project`, `reproducible` and their dependencies, then uses
`setupProject` to download and install a single SpaDES module
(*Biomass-core*) and its many dependencies (over 130 packages), as well
as a list of other R packages from GitHub to install.

```{r setupProject}
#| cache: true
#| echo: true
#| eval: false

repos <- c("predictiveecology.r-universe.dev", getOption("repos"))
install.packages(c("SpaDES.project", "reproducible"),
                 repos = repos, dependencies = TRUE)

library(SpaDES.project)

out <- setupProject(
  sideEffects = "PredictiveEcology/PredictiveEcology.org@14-fix-webpage-build/training/R/pkgList.R",
  options = list(repos = repos),
  name = "Introduction",
  modules = "PredictiveEcology/Biomass_core@main"
)
```

Check `out$pkgList` to see what packages are installed.

## Code explained

If you care to know what the code is "doing", read on.

The `setupProject` call above internally uses `Require` to download and
install any missing packages. Although the packages themselves are
installed in a folder associated with the dummy project "Introduction"
(see `.libPaths()` after running the code), `Require` *caches* the
downloaded package installation files in a user-accessible folder (so
independent from any project).

This means that, should you, e.g., switch projects and attempt to
reinstall the same or a subset of these packages, `setupProject` (via
`Require`) would access the package cache and reinstall them in whatever
new project folder library.

The same is true should you lose internet connection, since the
downloads do not need to happen again.

## See also

@sec-TroubleShoot on R package installation troubleshooting

[^1]: See this [introduction to R^3^T
    workflows](https://ceresbarros.github.io/reproducible-workflowsWS/presentations/20230712_BESMacroSIG2023_ReproducibleWorkflowsWS.pdf).
