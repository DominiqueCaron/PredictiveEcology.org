---
author: "Eliot McIntire"
date: last-modified
editor_options:
  chunk_output_type: console
---

# Simple workflow with setupProject

```{r setup}
#| include: false
knitr::opts_chunk$set(tidy = FALSE, 
                      eval = FALSE,
                      warning = FALSE, 
                      message = FALSE, 
                      error = FALSE)

## truncate text output
hook_output <- knitr::knit_hooks$get("output")

knitr::knit_hooks$set(output = function(y, options) {
  if (!is.null(n <- options$outlines)) {
    y <- xfun::split_lines(y)
    if (length(y) > n) {
      # truncate the output
      y <- c(head(y, n), "....\n")
    }
    y <- paste(y, collapse = "\n")
  }
  hook_output(y, options)
})

options(repos = "http://cran.us.r-project.org")
if (!require("Require")) {
  install.packages("Require", repos = c("https://predictiveecology.r-universe.dev", getOption("repos")))
}

```

[`SpaDES.project::setupProject()`](https://spades-project.predictiveecology.org/reference/setupProject.html)
deals with a number of challenges that crop up with working with
multiple modules created by potentially many people.

We will demonstrate its use with an example created by [Tati
Micheletti](https://github.com/tati-micheletti/Micheletti_SpaDES/blob/main/demo.R)
where a workflow with several modules is setup and run.

## Installation

```{r setupProject}
getOrUpdatePkg <- function(p, minVer = "0") {
  if (!isFALSE(try(packageVersion(p) < minVer, silent = TRUE) )) {
    repo <- c("predictiveecology.r-universe.dev", getOption("repos"))
    install.packages(p, repos = repo)
  }
}

getOrUpdatePkg("remotes")

remotes::install_github("PredictiveEcology/Require@simplify4")

getOrUpdatePkg("SpaDES.project", "0.0.8.9049")
```

## Using `setupProject`

`setupProject` does a series of very specific things, in a particular
order, so that the chances of package conflicts and user errors are
minimized.

Note how it downloads the listed modules directly from their GitHub
repositories (e.g.
[tati-micheletti/speciesAbundance](https://github.com/tati-micheletti/speciesAbundance))

```{r setupProject2}
##################### PART II: Download the modules and install the needed packages

Setup <- SpaDES.project::setupProject(
  
  paths = list(projectPath = "integratingSpaDESmodules"),
  
  modules = c("tati-micheletti/speciesAbundance@main",
              "tati-micheletti/temperature@main",
              "tati-micheletti/speciesAbundTempLM@main"),
  
  times = list(start = 2013,
               end = 2032),
  
  Restart = TRUE
)
```

The output of `setupProject` is a list of argument values that can be
passed to `simInit` or `simInitAndSpaDES`. The latter will not only
initialise the workflow but also run it.

```{r runSimInit}
##################### PART III: Run SpaDES

results <- do.call(SpaDES.core::simInitAndSpades, Setup)

```

```{r evaluteResults}
SpaDES.core::completed(results)
```

## See also

[`?SpaDES.core::simInit`](https://rdrr.io/cran/SpaDES.core/man/simInit.html)

[`?SpaDES.core::simInitAndSpaDES`](https://rdrr.io/cran/SpaDES.core/man/simInitAndSpaDES.html)
