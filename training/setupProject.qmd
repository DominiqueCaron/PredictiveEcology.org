---
author: "Eliot McIntire"
date: last-modified
editor_options:
  chunk_output_type: console
execute:
  eval: false
  tidy: false
  warning: false
  message: false
  error: false
---

# Simple workflow with setupProject

```{r setup}
#| include: false

## truncate text output
hook_output <- knitr::knit_hooks$get("output")

knitr::knit_hooks$set(output = function(y, options) {
  if (!is.null(n <- options$outlines)) {
    y <- xfun::split_lines(y)
    if (length(y) > n) {
      # truncate the output
      y <- c(head(y, n), "....\n")
    }
    y <- paste(y, collapse = "\n")
  }
  hook_output(y, options)
})
```

[`SpaDES.project`](https://spades-project.predictiveecology.org/) is a
package that deals with a number of challenges that crop up creating and
using workflows. These become particularly acute when working with
multiple modules created by potentially many people. [See here to see a
longer list of project
challenges](https://spades-project.predictiveecology.org/#project-challenges).

We will demonstrate its use with an example created by [Tati
Micheletti](https://github.com/tati-micheletti/Micheletti_SpaDES/blob/main/demo.R)
where a workflow with several modules is setup and run.

## Installation

```{r setupProject}
repos <- c("predictiveecology.r-universe.dev", getOption("repos"))
if (!require("SpaDES.project"))
  install.packages(c("SpaDES.project", "SpaDES.core"), repos = repos)
```

## Using `setupProject`

`setupProject` does a series of very specific things, in a particular
order, so that the chances of package conflicts and user errors are
minimized.

Note how it downloads the listed modules directly from their GitHub
repositories (e.g.
[tati-micheletti/speciesAbundance](https://github.com/tati-micheletti/speciesAbundance))

```{r setupProject2}
##################### PART II: Download the modules and install the needed packages

Setup <- SpaDES.project::setupProject(
  
  paths = list(projectPath = "integratingSpaDESmodules"),
  
  modules = c("tati-micheletti/speciesAbundance@main",
              "tati-micheletti/temperature@main",
              "tati-micheletti/speciesAbundTempLM@main"),
  
  times = list(start = 2013,
               end = 2032)
  
)
```

The output of `setupProject` is a list of argument values that can be
passed to `simInit2` or `simInitAndSpaDES2`. The latter will not only
initialise the workflow but also run it.

```{r runSimInit}
##################### PART III: Run SpaDES
results <- SpaDES.core::simInitAndSpades2(Setup)
```

```{r evaluteResults}
SpaDES.core::completed(results)
```

## Examples

In the remainding chapters of this section, we will explore several examples, including learning of several arguments to the function `setupProject`. But we will start very simple first.

## See also

[`?SpaDES.project::setupProject`](https://spades-project.predictiveecology.org/reference/setupProject.html)

[`?SpaDES.core::simInit`](https://rdrr.io/cran/SpaDES.core/man/simInit.html)

[`?SpaDES.core::simInitAndSpaDES`](https://rdrr.io/cran/SpaDES.core/man/simInitAndSpaDES.html)
