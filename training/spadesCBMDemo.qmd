---
author: "CÃ©line Boisvenue"
date: last-modified
editor_options:
  chunk_output_type: console
editor:
  mode: source
bibliography: references/references.bib
execute:
  tidy: false
  warning: false
  message: false
  error: false
  cache: true
  eval: false
---

# Forest Carbon Modelling in SpaDES with setupProject

::: {.callout-tip appearance="simple"}
See \[Barebones R script\] for the code shown in this chapter
:::

```{r setup}
#| include: false
#| eval: true
#| cache: false
#| purl: false

knitr::opts_chunk$set(tidy = FALSE, 
                      warning = FALSE, 
                      message = FALSE, 
                      error = FALSE)

# truncate text output
hook_output <- knitr::knit_hooks$get("output")

knitr::knit_hooks$set(output = function(x, options) {
  if (!is.null(n <- options$outlines)) {
    x <- xfun::split_lines(x)
    if (length(x) > n) {
      # truncate the output
      x <- c(head(x, n), "....\n")
    }
    x <- paste(x, collapse = "\n")
  }
  hook_output(x, options)
})

if (Sys.getenv("USERNAME") == "GHA") {
  googledrive::drive_auth(path = Sys.getenv("GOOGLE_APP_CREDENTIALS"))
}

qmdPath <- normalizePath(getwd(), winslash = "/")

if (!interactive()) { 
  dir.create("~/SpaDES_book/spadesCBMDemo", recursive = TRUE)
  knitr::opts_knit$set(root.dir = "~/SpaDES_book/spadesCBMDemo")
}
```

spadesCBM is a modular, transparent and spatially explicit implementation of the logic, pools structure, equations, and default assumptions of the Carbon Budget Model of the Canadian Forest Sector [CBM-CFS]
(https://natural-resources.canada.ca/climate-change/climate-change-impacts-forests/carbon-accounting/carbon-budget-model/13107).
It applies the science presented in @kurz2009 in a similar way to the
simulations in @boisvenue2016 and @boisvenue2022 but calls Python
functions for annual processes. These functions are, like much of
modelling-based science, continuously under development.

## spadesCBM Modules

Four modules need to be run in tandem for a spadesCBM simulation (see section XX
for how these relate in SpaDES). The first module *CBM_defaults* reads in
defaults CBM-CFS parameters for Canada.  The second module *CBM_dataPrep_SK* is
a data preparation SpaDES module, where input data and spatial layers are
assembled and prepared for a specific study area (the *_SK* indicated the
specific study area or scenario). In spadesCBM, as in CBM-CFS, growth curves are
the main change-agent. The third module
*CBM_vol2biomass* translates user-provided growth curves ($m^3/ha$) into increments for specific above ground carbon pools (metric tonnes of carbon/ha) with @boudewyn2007 models and a smoothing algorithm. These three modules provide the input to *CBM_core* module where where processes are applied on a yearly time step.
This modularity enables users to access and change default parameters, change
inputs, and assess the impact of these changes. We are working on some
implementations of this modularity and making these available to the community.
Hope others will do the same. A manual describing spadesCBM in detail is forthcoming. The link to the manual will be posted here.

Several core utilities to spadesCBm are provided by the [`CBMutils`](https://github.com/PredictiveEcology/CBMutils) package, available on GitHub. Active development `CBMutils` and all `spadesCBM` modules is underway.

## Setup

```         
insert needed chunk from the global
```
In this example, we will setup the workflow using `setupProject` from the
[`SpaDES.project`](https://spades-project.predictiveecology.org/) package and
current versions of the spadesCBM modules.

::: {#imp-gdrive .callout-important}
## Google account needed for this example

Like the LandR example, you will need to access some of the data using the `googledrive` R package (part of the `tidyverse` family). During the `simInit()` (or `simInitAndSpades()`) call R will prompt you to either choose a previously authenticated account (if you have previously used `googledrive`) or to open a browser window and authenticate. If this doesn't work, try this workaround:

```{r setupGoogle}
#| eval: false
#| results: hide
#| code-fold: false
#| code-summary: "Show code"
install.packages(c("googledrive", "httpuv"), repos = repos)

googledriveAuthPath <- "~/SpaDES_book/googledrive_auth_cache"
dir.create(googledriveAuthPath, showWarnings = FALSE)
googledrive::drive_auth(cache = "~/SpaDES_book/googledrive_auth_cache")

```

Make sure you give `tidyverse` read/write access to your files:

![](assets/img/gdriveauth.png){fig-align="center" width="467"}
:::



## Run Simulation

```         
simPython <- do.call(SpaDES.core::simInitAndSpades, out)
```

### Some examples/results

#### NPP

```         
MasterR <- terra::unwrap(simPython$masterRaster)
npp <- as.data.table(copy(simPython$NPP))
npp[, `:=`(avgNPP, mean(NPP)), by = c("pixelGroup")]
cols <- c("simYear", "NPP")
avgNPP <- unique(npp[, `:=`((cols), NULL)])
t <- simPython$spatialDT[, .(pixelIndex, pixelGroup)]
setkey(t, pixelGroup)
setkey(avgNPP, pixelGroup)
temp <- merge(t, avgNPP, on = "pixelGroup", allow.cartesian=TRUE)
setkey(temp, pixelIndex)
plotMaster <- terra::rast(simPython$masterRaster)
plotMaster[] <- 0
plotMaster[temp$pixelIndex] <- temp$avgNPP
pixSize <- prod(res(MasterR))/10000
temp[, `:=`(pixNPP, avgNPP * pixSize)]
overallAvgNpp <- sum(temp$pixNPP)/(nrow(temp) * pixSize)
quickPlot::Plot(plotMaster, new = TRUE,
                title = paste0("Pixel-level average NPP",
                                "\n Landscape average: ", round(overallAvgNpp, 3), "  MgC/ha/yr."))
```

#### Total Carbon

## Barebones script
```
insert whole global here. 
```
