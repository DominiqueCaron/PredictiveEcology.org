---
author: "Eliot McIntire"
date: last-modified
editor_options:
  chunk_output_type: console
execute:
  tidy: false
warning: false
message: false
error: false
cache: false
---

# Workflows with setupProject

::: {.callout-tip appearance="simple"}
See [Barebones R script] for the code shown in this chapter
:::

```{r setup}
#| include: false
#| purl: false

## truncate text output
hook_output <- knitr::knit_hooks$get("output")

knitr::knit_hooks$set(output = function(y, options) {
  if (!is.null(n <- options$outlines)) {
    y <- xfun::split_lines(y)
    if (length(y) > n) {
      # truncate the output
      y <- c(head(y, n), "....\n")
    }
    y <- paste(y, collapse = "\n")
  }
  hook_output(y, options)
})
libPath <- ifelse(dir.exists("packages"), "packages", "training/packages") # if run interactively vs knited
.libPaths(libPath)
```

Once we want to run a project that is more sophisticated, we can start
using `SpaDES.project`.
[`SpaDES.project`](https://spades-project.predictiveecology.org/) is a
package that deals with a number of challenges that crop up creating and
using workflows. These become particularly acute when working with
multiple modules created by potentially many people. [See here to see a
longer list of project
challenges](https://spades-project.predictiveecology.org/#project-challenges).

We will demonstrate its use with an example created by [Tati
Micheletti](https://github.com/tati-micheletti/Micheletti_SpaDES/blob/main/demo.R)
where a workflow with several modules is setup and run.

## `SpaDES.project::setupProject`


https://spades-project.predictiveecology.org/articles/i-getting-started.html



## Installation

```{r setupProject}
repos <- c("predictiveecology.r-universe.dev", getOption("repos"))
# if (!require("SpaDES.project"))
Require::Install(c("SpaDES.project", "SpaDES.core", "reproducible"), repos = repos, dependencies = TRUE)

packagePath = SpaDES.project::.libPathDefault("~/SpaDES_book/integratingSpaDESmodules")
```

```{r}
packagePath = SpaDES.project::.libPathDefault("PredictiveEcology.org")
```

## Using `setupProject`

`setupProject` does a series of very specific things, in a particular
order, so that the chances of package conflicts and user errors are
minimized.

Note how it downloads the listed modules directly from their GitHub
repositories (e.g.
[tati-micheletti/speciesAbundance](https://github.com/tati-micheletti/speciesAbundance))

```{r setupProject2}
##################### PART II: Download the modules and install the needed packages
Setup <- SpaDES.project::setupProject(
  
  paths = list(projectPath = "~/SpaDES_book/integratingSpaDESmodules",
               packagePath = packagePath),
  
  modules = c("tati-micheletti/speciesAbundance@main",
              "tati-micheletti/temperature@main",
              "tati-micheletti/speciesAbundTempLM@main"),
  
  times = list(start = 2013,
               end = 2030),
  
  updateRprofile = FALSE
  
)
```

The output of `setupProject` is a list of argument values that can be
passed to `simInitAndSpaDES2` (with the "2" it accepts a list of
arguments, instead of the arguments themselves).

```{r runSimInit}
results <- SpaDES.core::simInitAndSpades2(Setup)
```

## Emergent workflow

We can evaluate the sequence of events using `completed`

```{r evaluteResults}
SpaDES.core::completed(results)
```

We can also see how modules and objects interact using the functions objectDiagram() and moduleDiagram().

Modulesâ€™ diagram showing the interactions among modules:
```{r moduleDiagram}
SpaDES.core::moduleDiagram(results)
```


We can also access any objects and use them. For example, we can look at the forecasted abundances and the difference raster is also possible. This is done by calling the object name from the results list.
```{r objectDiagram}
terra::plot(rast(results$forecasts))
```

## Examples

In the remaining chapters of this section, we will explore several
examples, including learning of several arguments to the function
`setupProject`. But we will start very simple first.

## See also

[All Functions in SpaDES.core](https://spades-core.predictiveecology.org/reference/index.html)

[?SpaDES.core::completed](https://spades-core.predictiveecology.org/reference/simList-accessors-events.html)

## Barebones R script

```{r}
#| eval: true
#| echo: false
#| purl: false

fileName <- file.path("R/Chapter_scripts", sub("rmarkdown", "R", knitr::current_input()))
```

```{r file = fileName}
#| eval: false
#| echo: true
#| purl: false

```
