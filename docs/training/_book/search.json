[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Robust and nimble scientific workflows, using SpaDES",
    "section": "",
    "text": "Preface\nThis book is a work in progress. Please visit this again as chapters are being added and modified.\n\n\nAcknowledgements\nWe thank the various contributors, SpaDES developers and SpaDES users that continue to make the open-source ecosystem of SpaDES modules grow.\nWe also thank the Quarto team for their great work.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Why SpaDES?\nSpaDES is a set of R packages that facilitate implementing nimble workflows that follow in the principles of repeatability, reproducibility, reusability and transparency (R3T), via the creation and use of highly modular code that has metadata attached.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#why-spades",
    "href": "intro.html#why-spades",
    "title": "Introduction",
    "section": "",
    "text": "Modularity\nModular code for ecological analyses has been long proposed (Reynolds and Acock 1997). Modularity means that scripts can be broken up into themes that bundled into meaningful chunks that can be easily moved, swapped, replaced or scrapped easily. A nice example of this is Barros et al. (2023) where a module was included or removed to identify the value of “adding more complexity”. One simple conclusion followed Occam’s Razor: simpler data and models predicted simpler characteristics of the forest than the complex data and models. In other words, adding complexity to a model made the model perform worse for some characteristics.\n\n\nMetadata\nMetadata in a SpaDES context includes identifying what objects  are expected by a chunk of code and what objects are created by a chunk of code: the inputs and outputs. This forces a user to understand their code and its linkages, and it allows R to know how to connect this chunk of code with others. Importantly, it allows SpaDES to chain modules such that the workflow structure can be defined from the bottom-up, rather than top-down.\n\n\nNimbleness\nTogether SpaDES’s modularity, standardized structure and metatada, improve workflow nimbleness, where we can weave together new Results that use new data, updated data, a new module, a new study area, a new visualization, address new stakeholder’s needs and more.\n\nAren’t packages and functions sufficient?\nScientists have embraced the idea of modular code by creating and using functions, often bundled into packages, e.g., R packages. This is analogous to the Methods section of a journal paper: i.e., the methods (functions) describe how you will do something. The use of packages in this way has massively accelerated Ecology and other data sciences.\nHowever, even if you know all the functions that a paper used, this in itself is not sufficient to reproduce the Results. SpaDES modules can be thought of the recipe needed to make the Results. In other words, a SpaDES module enables a developer to bundle the functions in a specific order so that one can recreate the steps to make the Results. A user can then use the module directly, rather instead of trying to recreate the necessary sequence of functions.\n\n\n\nI use targets for my workflows. How does SpaDES differ?\nThere are two major differences between targets and the SpaDES approach:\n\ntargets is “top-down”, SpaDES is “bottom-up” – with targets, the workflow is entirely defined by the script developer (as in Make). This is, they define the connections and the sequence between each “target” (the code sections that call functions and execute operations), when they will be iterated and for “how many times”. Re-arranging “targets” sequences and iterations may therefore be hard, if the “target” code is not well known/understood.\nSpaDES is meant to enable mixing-and-matching different modules that share the same inputs/outputs easily – i.e. without having to have deep knowledge of the module code. SpaDES will read each module’s metadata and from it deduce the sequence in which modules need to be chained. SpaDES will also iterate module code when necessary, following the developer’s “scheduling” instructions. The workflow sequence, therefore, arises from the set of modules that is being used1.\nSpaDES has “embedded” metadata – or at least it makes the developer think about it2. Each module is defined by not only listing the inputs and outputs, but also their descriptions and types of object class, the module’s description, it’s operating time scale and what packages and other modules it depends on, and much more. Some of the metadata is essential to chain modules (lists of inputs and outputs), other isn’t, but can greatly facilitate workflow setup (e.g. declaring module dependencies), while other metadata are simply good to have (e.g. a description of the module).\n\nFinally, both targets and SpaDES have embedded caching mechanisms that in SpaDES’s case can be used and controlled at several levels (by the user, in the module code, etc.) – see 9  Introduction to Cache on SpaDES caching mechanisms.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#the-three-big-problems-in-applied-ecology",
    "href": "intro.html#the-three-big-problems-in-applied-ecology",
    "title": "Introduction",
    "section": "The three big problems in applied ecology",
    "text": "The three big problems in applied ecology\nApplied ecology – the study of ecological systems that are affected by humans activities – can be seen as addressing these problems:\n\nmany species are declining or uncontrollably increasing\nmany processes (like fire and food web dynamics) are changing\nmost problems require trans-disciplinary solutions\n\nAlongside these problems, ecologists must grapple with new expectations for how they do their work to inform these problems.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#the-expectations",
    "href": "intro.html#the-expectations",
    "title": "Introduction",
    "section": "The expectations",
    "text": "The expectations\nTo address these problems in the 21st century, applied ecologists must uphold standards of:\n\ntransparency – analyses must be able to be inspected, understood, and scrutinized by many eyes;\nreproducibilty – analyses must be able to be reproduced by others and into the future;\nnimbleness – analyses must be able to respond quickly to new data, new insights, new drivers, and new management needs;\nforecasting – analyses must demonstrate that they are proving reliable insights into the future, not just the past;\nvalidation – analyses must clearly demonstrate why they should be trusted and used;\nbroad participation – every step of a project must include knowledge and participation from outside the scientific community.\n\nIt can be very challenging to address each of these.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#perfict",
    "href": "intro.html#perfict",
    "title": "Introduction",
    "section": "PERFICT",
    "text": "PERFICT\nThis book is intended to show a way to show applied ecologists an approach that we have developed using the SpaDES set of R packages. This approach will allow ecologists to get towards a PERFICT approach (McIntire et al. 2022). Briefly, PERFICT is:\n\nPredict regularly from models thare are\nEvaluated,\nReusable,\nFreely accessible, and\nInteroperable, and that are part of\nContinuous workflows that are\nTested regularly\n\nWith this approach, we can better meet the expectations, and better address the problems.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#our-challenge",
    "href": "intro.html#our-challenge",
    "title": "Introduction",
    "section": "Our challenge",
    "text": "Our challenge\nWith the limited training provided in this book, applied ecologists can work towards creating PERFICT code. Embracing the transparency and nimbleness it provides, we can pivot more rapidly to the current management needs. When we are asked at the end of a 3 year project, “can we redo everything because we have a new stakeholder who feels that our assumptions are wrong?”, our answer should be “yes”.\n\n\n\n\nBarros, Ceres, Yong Luo, Alex M. Chubaty, Ian M. S. Eddy, Tatiane Micheletti, Céline Boisvenue, David W. Andison, Steven G. Cumming, and E. J. B. McIntire. 2023. “Empowering Ecological Modellers with a PERFICT Workflow: Seamlessly Linking Data, Parameterisation, Prediction, Validation and Visualisation.” Methods in Ecology and Evolution 14 (1): 173–88. https://doi.org/https://doi.org/10.1111/2041-210X.14034.\n\n\nMcIntire, Eliot J. B., Alex M. Chubaty, Steven G. Cumming, Dave Andison, Ceres Barros, Céline Boisvenue, Samuel Haché, Yong Luo, Tatiane Micheletti, and Frances E. C. Stewart. 2022. “PERFICT: A Re-Imagined Foundation for Predictive Ecology.” Ecology Letters 25 (6): 1345–51. https://doi.org/10.1111/ele.13994.\n\n\nReynolds, James F., and Basil Acock. 1997. “Modularity and Genericness in Plant and Ecosystem Models.” Ecological Modelling 94 (1): 7–16. https://doi.org/10.1016/S0304-3800(96)01924-2.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#footnotes",
    "href": "intro.html#footnotes",
    "title": "Introduction",
    "section": "",
    "text": "Note that SpaDES still allows a user to impose module sequencing if they wish to.↩︎\nSpaDES won’t force most metadata to be filled, so it’s at the discretion of the module developer how much detail they want to provide.↩︎",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "settingUp.html",
    "href": "settingUp.html",
    "title": "Setting up your computer and system",
    "section": "",
    "text": "This brief section shows how to set up R, RStudio, SpaDES, and pre-install R packages necessary to run all chapter code, if you need to do so.",
    "crumbs": [
      "Setting up your computer and system"
    ]
  },
  {
    "objectID": "installRandSpatialPkgs.html",
    "href": "installRandSpatialPkgs.html",
    "title": "1  Installing R and Spatial Packages",
    "section": "",
    "text": "1.1 Install R",
    "crumbs": [
      "Setting up your computer and system",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installing R and Spatial Packages</span>"
    ]
  },
  {
    "objectID": "installRandSpatialPkgs.html#install-r",
    "href": "installRandSpatialPkgs.html#install-r",
    "title": "1  Installing R and Spatial Packages",
    "section": "",
    "text": "1.1.1 Windows\n\nDownload and run the R installer (as administrator!).\nDownload and install the Rtools version that matches the installed R version. Be sure to check the “add Rtools to PATH” option during installation if necessary (Rtools v4.0).\n\n\n\n1.1.2 macOS\n\nDownload and run the R installer from https://cran.r-project.org/bin/macosx.\nInstall Xcode commandline tools from the terminal:\n\nxcode-select --install\n\nInstall homebrew from the terminal (instructions at https://brew.sh/)\nInstall GDAL and other spatial packages (instructions at https://www.alexchubaty.com/post/2020-01-08-using-latest-gdal-macos-redux/)\nInstall OpenMP support for data.table:\n\nbrew update && brew install llvm\n\nInstall GLPK (needed for full igraph functionality; used with SpaDES.core::moduleGraph):\n\nbrew install glpk\nThen, in R, install igraph from source so it is compiled with GLPK:\ninstall.packages(\"igraph\", type = \"source\")\n\n\n1.1.3 Linux\nInstall via apt or yum depending on your distribution. Instructions for Ubuntu 18.04 LTS are shown below.\n\nInstall R and its development libraries:\n\nsudo apt install r-base r-base-dev\n\nInstall java and configure R to use it:\n\nsudo apt build-dep -y r-cran-rjava\nsudo R CMD javareconf\n\nInstall dependencies for spatial and other packages:\n\nsudo apt build-dep -y r-cran-tkrplot\n\nsudo apt-get install -y \\\nccache \\\ngdal-bin \\\ngit \\\nlibcairo2-dev \\\nlibcurl4-gnutls-dev \\\nlibgdal-dev \\\nlibgeos-dev \\\nlibgit2-dev \\\nlibgmp-dev \\\nlibjq-dev \\\nlibmagick++-dev \\\nlibproj-dev \\\nlibprotobuf-dev \\\nlibprotoc-dev \\\nlibssh2-1-dev \\\nlibssl-dev \\\nlibudunits2-dev \\\nlibv8-dev \\\nlibxml2-dev \\\nlibxt-dev \\\npandoc \\\npandoc-citeproc \\\nprotobuf-compiler \\\npython-gdal \\\npython3-gdal \\\ncurl \\\nr-cran-littler",
    "crumbs": [
      "Setting up your computer and system",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installing R and Spatial Packages</span>"
    ]
  },
  {
    "objectID": "installRandSpatialPkgs.html#see-also",
    "href": "installRandSpatialPkgs.html#see-also",
    "title": "1  Installing R and Spatial Packages",
    "section": "1.2 See also",
    "text": "1.2 See also\nHands on programming with R",
    "crumbs": [
      "Setting up your computer and system",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installing R and Spatial Packages</span>"
    ]
  },
  {
    "objectID": "PackagesForBook.html",
    "href": "PackagesForBook.html",
    "title": "2  Pre-installing R packages for book",
    "section": "",
    "text": "2.1 Installation code\nIf you can run the following code, then you will be able to run code in any of the chapters in this book. This code begins by installing SpaDES.project, reproducible and their dependencies, then uses setupProject to download and install a single SpaDES module (Biomass-core) and its many dependencies (over 130 packages), as well as a list of other R packages from GitHub to install.\nCode\nrepos &lt;- c(\"predictiveecology.r-universe.dev\", getOption(\"repos\"))\ninstall.packages(c(\"SpaDES.project\", \"reproducible\"),\n                 repos = repos, dependencies = TRUE)\n\nlibrary(SpaDES.project)\n\nout &lt;- setupProject(\n  sideEffects = \"PredictiveEcology/PredictiveEcology.org@14-fix-webpage-build/training/R/pkgList.R\",\n  options = list(repos = repos),\n  name = \"Introduction\",\n  modules = \"PredictiveEcology/Biomass_core@main\"\n)\nCheck out$pkgList to see what packages are installed.",
    "crumbs": [
      "Setting up your computer and system",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Pre-installing R packages for book</span>"
    ]
  },
  {
    "objectID": "PackagesForBook.html#code-explained",
    "href": "PackagesForBook.html#code-explained",
    "title": "2  Pre-installing R packages for book",
    "section": "2.2 Code explained",
    "text": "2.2 Code explained\nIf you care to know what the code is “doing”, read on.\nThe setupProject call above internally uses Require to download and install any missing packages. Although the packages themselves are installed in a folder associated with the dummy project “Introduction” (see .libPaths() after running the code), Require caches the downloaded package installation files in a user-accessible folder (so independent from any project).\nThis means that, should you, e.g., switch projects and attempt to reinstall the same or a subset of these packages, setupProject (via Require) would access the package cache and reinstall them in whatever new project folder library.\nThe same is true should you lose internet connection, since the downloads do not need to happen again.",
    "crumbs": [
      "Setting up your computer and system",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Pre-installing R packages for book</span>"
    ]
  },
  {
    "objectID": "PackagesForBook.html#see-also",
    "href": "PackagesForBook.html#see-also",
    "title": "2  Pre-installing R packages for book",
    "section": "2.3 See also",
    "text": "2.3 See also\nChapter 3 on R package installation troubleshooting",
    "crumbs": [
      "Setting up your computer and system",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Pre-installing R packages for book</span>"
    ]
  },
  {
    "objectID": "PackagesForBook.html#footnotes",
    "href": "PackagesForBook.html#footnotes",
    "title": "2  Pre-installing R packages for book",
    "section": "",
    "text": "See this introduction to R3T workflows.↩︎",
    "crumbs": [
      "Setting up your computer and system",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Pre-installing R packages for book</span>"
    ]
  },
  {
    "objectID": "TroubleshootingPackageInstallation.html",
    "href": "TroubleshootingPackageInstallation.html",
    "title": "3  Troubleshooting R package installation",
    "section": "",
    "text": "3.1 General diagnosing tools\nThe following help diagnose many of the issues mentioned below.",
    "crumbs": [
      "Setting up your computer and system",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Troubleshooting R package installation</span>"
    ]
  },
  {
    "objectID": "TroubleshootingPackageInstallation.html#general-diagnosing-tools",
    "href": "TroubleshootingPackageInstallation.html#general-diagnosing-tools",
    "title": "3  Troubleshooting R package installation",
    "section": "",
    "text": "loadedNamespaces() shows which packages are actually loaded\nsessionInfo() shows several other things as well, including package versions. Very useful when called after restarting R to see if there are any packages being pre-loaded\npackageVersion(\"&lt;packagename&gt;\") shows which version of the package your session currently has access to (already loaded or on disk in the library but not yet loaded). It might not necessarily correspond to the installed version.",
    "crumbs": [
      "Setting up your computer and system",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Troubleshooting R package installation</span>"
    ]
  },
  {
    "objectID": "TroubleshootingPackageInstallation.html#cant-install-a-package",
    "href": "TroubleshootingPackageInstallation.html#cant-install-a-package",
    "title": "3  Troubleshooting R package installation",
    "section": "3.2 Can’t install a package",
    "text": "3.2 Can’t install a package\n\n3.2.1 Package has already been loaded\nSome packages have files that cannot be deleted if they are being used in the current or another R session. This is primarily true for packages with compiled code. This will create several cascading problems, even after restarting the current R session.\n\n3.2.1.1 Potential solutions\n\nRestart R – The number one solution for many problems is to restart R. If using RStudio, the keyboard shortcut is commonly CTRL-SHIFT-F10.\nClose other R or RStudio sessions – If you have more than one session open, each one may have packages loaded. That means you can’t install (update), delete or uninstall a package that has already been loaded elsewhere.\nClose RStudio and install in a separate R session – By default, RStudio pre-loads packages before user input. This is convenient under some conditions, but is very difficult to deal with when it doesn’t work correctly – e.g. when these packages need to be updated. You may have to close RStudio, open a separate R session (without RStudio) and install the packages there.\nUpdate packages in user library – Package versions may collide between the user library and the project library. Try to update the packages in the user library. To determine where this is, you can try:\n\nuserLib &lt;- Sys.getenv(\"R_LIBS_USER\")\nthen update the packages there:\nupdate.packages(userLib, ask = FALSE)\n\nTurn off R diagnostics – Alternatively (or in complement) to the solution above, you can turn off R code diagnostics (temporarily or permanently), in your RStudio’s Global Options. This can greatly reduce the number of pre-loaded packages at the expense of losing some RStudio functionality. Via RStudio GUI:\n\n\nGo to Tools &gt; Global Options &gt; Code\nOpen the Diagnostics tab, and uncheck “Show diagnostics for R”\n\nRestart R after doing the above. Try the package installations again. If they fail again, see other solutions and try them.\n\n\n\nTurning of R diagnostics with RStudio – a potential solution to prevent RStudio from pre-loading several R packages.\n\n\nAlternatively, you can:\n\n\nCode\ninstall.packages(\"RStudio.prefs\")\nRStudio.prefs::use_RStudio_prefs(\n  show_diagnostics_r = FALSE\n)\n\n\n\n\n\n3.2.2 00LOCK folder issues\nOnce a package installation failure happened and interrupted the process, there may be a 00LOCK folder that R cannot remove, nor overwrite. R can’t install anything until that 00LOCK folder is removed.\n\n3.2.2.1 Potential solutions\n\nDelete 00LOCK folder(s) – The error message of the package installation failure will indicate if this is the issue and tell you where the 00LOCK folder is located. Make sure all other R sessions are closed and that the current session is restarted (and possibly closed), before deleting the 00LOCK folder. Then try installing the package again. If you can’t delete it, ensure RStudio and R are completely closed and possibly other software such as Git version control software (e.g. GitKraken, Bitbucket).\n\n\n\n\n3.2.3 Missing dependencies\nAlthough this happens less and less because functions like install.packages now default to installing package dependencies, it can still happen that one of the target package’s dependencies is missing or failed to install. The error message will indicate which one, but bear in mind that when installing many packages/dependencies the reason why the dependency wasn’t installed may be burried in previous messages and warnings. So read the installation output carefully.\n\n3.2.3.1 Potential solutions\nThe solution will depend on the reason why the dependency package failed to install. See solutions in Package has already been loaded and 00LOCK folder issues.",
    "crumbs": [
      "Setting up your computer and system",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Troubleshooting R package installation</span>"
    ]
  },
  {
    "objectID": "TroubleshootingPackageInstallation.html#installed-a-package-but-it-isnt-showing-up",
    "href": "TroubleshootingPackageInstallation.html#installed-a-package-but-it-isnt-showing-up",
    "title": "3  Troubleshooting R package installation",
    "section": "3.3 Installed a package, but it isn’t showing up",
    "text": "3.3 Installed a package, but it isn’t showing up\n\n3.3.1 You installed it to a different library\nAs people migrate to using “project” libraries, i.e., a unique R package library for each project, sometimes, the user library (the one that you get by default with a normal R installation) can cause problems.\n\n3.3.1.1 Possible Solutions\n\nBecome aware of user vs. project library – .libPaths() is your friend. It tells you what folder the current R session is using as a package library. The default place for a personal library in R depends on operating system. For windows, it is something like:\n\n\n\nCode\n&gt; Sys.getenv(\"R_LIBS_USER\") [1] \"C:\\\\Users\\\\emcintir\\\\AppData\\\\Local/R/win-library/4.4\"}\n\n\nFor Linux, it is something like:\n\n\nCode\n&gt; Sys.getenv(\"R_LIBS_USER\") [1] \"/home/emcintir/R/x86_64-pc-linux-gnu-library/4.3\"}\n\n\nIf you have a project-specific library, including if you use SpaDES.project or renv, .libPaths() will point to somewhere else. For SpaDES.project it will be something like:\n\n\nCode\n# Windows \n&gt; .libPaths() [1] \"C:/Users/emcintir/AppData/Roaming/R/data/R/SpaDES.project/packages/x86_64-w64-mingw32/4.4\"  \n\n# Linux \n&gt; .libPaths() [1] \"/home/emcintir/.local/share/R/SpaDES.project/packages/x86_64-pc-linux-gnu/4.3\"}\n\n\nWhen you install a package, look where it is getting installed and compare it to where you want it to be installed.\n\n\n\n3.3.2 Package loaded in RAM collides with package on disk\nIf you previously loaded a package via e.g., library(ggplot2), then you happen to update it to a newer version, the newer version will be on disk in your library, but packageVersion(\"ggplot2\") will show the older one. Restart R and it will be solved.",
    "crumbs": [
      "Setting up your computer and system",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Troubleshooting R package installation</span>"
    ]
  },
  {
    "objectID": "TroubleshootingPackageInstallation.html#see-also",
    "href": "TroubleshootingPackageInstallation.html#see-also",
    "title": "3  Troubleshooting R package installation",
    "section": "3.4 See also",
    "text": "3.4 See also\nAn alternative way to address package management is using the renv package. Some people have great success with this. Some of us find it not very amenable to modular workflows.",
    "crumbs": [
      "Setting up your computer and system",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Troubleshooting R package installation</span>"
    ]
  },
  {
    "objectID": "SpaDESbasics.html",
    "href": "SpaDESbasics.html",
    "title": "SpaDES 101",
    "section": "",
    "text": "Under construction.",
    "crumbs": [
      "SpaDES 101"
    ]
  },
  {
    "objectID": "NewModuleIntro.html",
    "href": "NewModuleIntro.html",
    "title": "4  Introduction to SpaDES Modules",
    "section": "",
    "text": "4.1 Some R code to convert\nWe will start by thinking about metadata: What is metadata?\nWe can examine the following code chunk. First, we ask: what are the inputs and the outputs?\nCode\n# create some data\ny &lt;- x + rnorm(10)\n# fit a linear model\nout &lt;- lm(y ~ x)\n\n# plot the fit\nplot(out)\nThe inputs to this chunk are just one: the object x. This code will not work (i.e., it will cause an error) if x is not defined. The outputs are y and out. Both of these are created within this chunk.\nNext, what are the package dependencies?. We see that there are three functions: rnorm, lm and plot. We don’t know what packages they are in, so we can find out by typing them at the R prompt. At the bottom of the function, it says that the function rnorm is in the stats package. Fortunately for us, this is a default (“base”) package in R and it is always pre-loaded. So, nothing to do here.\nCode\n&gt; rnorm\nfunction (n, mean = 0, sd = 1) \n...\n&lt;environment: namespace:stats&gt;\nSo, our metadata are:\nWe will next put them into the correct places in the new SpaDES module.",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to SpaDES Modules</span>"
    ]
  },
  {
    "objectID": "NewModuleIntro.html#some-r-code-to-convert",
    "href": "NewModuleIntro.html#some-r-code-to-convert",
    "title": "4  Introduction to SpaDES Modules",
    "section": "",
    "text": "Inputs: x\nOutputs: y, out\nPackage dependencies: Base packages only",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to SpaDES Modules</span>"
    ]
  },
  {
    "objectID": "NewModuleIntro.html#create-a-module",
    "href": "NewModuleIntro.html#create-a-module",
    "title": "4  Introduction to SpaDES Modules",
    "section": "4.2 Create a module",
    "text": "4.2 Create a module\nWe use the SpaDES.core function newModule() to make a new module.\nStep 1 – move the code to “an init event”. This “init” even is a convention that SpaDES uses. A module must always have an “init” event.\n\n\nCode\nRequire::Install(\"SpaDES.core\", repos = c(\"https://predictiveecology.r-universe.dev\", getOption(\"repos\")))\nSpaDES.core::newModule(name = \"My_linear_model\", path = \"tutos/NewModuleIntro\", open = FALSE,\n                       events = list(\n                         init = {\n                           y &lt;- x + rnorm(10)\n                           # fit a linear model\n                           out &lt;- lm(y ~ x)\n                           \n                           # plot the fit\n                           plot(out)\n                         }\n                       ))\n\n\nSo far, the linear model seems still recognizable. We now\nThis will create a new folder with several files in it. See ?newModule for details. For now, run the above and open the My_linear_model.R script that it creates.",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to SpaDES Modules</span>"
    ]
  },
  {
    "objectID": "NewModuleIntro.html#module-metadata",
    "href": "NewModuleIntro.html#module-metadata",
    "title": "4  Introduction to SpaDES Modules",
    "section": "4.3 Module metadata",
    "text": "4.3 Module metadata\nScroll down to inputObjects and expectsInputs(). We will declare x as an “input” by putting it there.\n\n\nCode\ninputObjects = bindrows(\n    expectsInput(objectName = \"x\", objectClass = \"numeric\", \n                 desc = \"The inputs for the linear model\", sourceURL = NA)\n  )\n\n\nNext, scroll down to outputObjects and createsOutput(). We will declare y and out as “outputs” by putting them there. Don’t forget the comma at the end of each createsOutput() as each is an argument to bindrows.\n\n\nCode\noutputObjects = bindrows(\n    createsOutput(objectName = \"y\", objectClass = \"numeric\", \n                  desc = \"The randomly created varible that is used as a response variable\"),\n    createsOutput(objectName = \"out\", objectClass = \"lm\", \n                  desc = \"A linear model object from the equation (x ~ y)\")\n  )",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to SpaDES Modules</span>"
    ]
  },
  {
    "objectID": "NewModuleIntro.html#add-code---the-init-event-function",
    "href": "NewModuleIntro.html#add-code---the-init-event-function",
    "title": "4  Introduction to SpaDES Modules",
    "section": "4.4 Add code - the Init event function",
    "text": "4.4 Add code - the Init event function\nFirst, we move the first two lines of the previous code into a function. We will choose the Init function. We will discuss why bellow.\n\n\nCode\nInit &lt;- function(sim) {\n  y &lt;- x + rnorm(10)\n  out &lt;- lm(y ~ x)\n  return(invisible(sim))\n}\n\n\n\n4.4.1 Sharing inputs and outputs\nYou may have noticed that the Init function template defines a function with a sim argument. This is an object we haven’t learned about yet; we will just think of it as a list where we can put objects we want to share with other modules or “just keep them for later”, such as our inputs and outputs.\nTo share these objects, we assign them to the sim list using the normal R notation &lt;-. We have to make this modification 5 times for every instance of our inputs and outputs.\n\n\nCode\nInit &lt;- function(sim) {\n  sim$y &lt;- sim$x + rnorm(10)\n  sim$out &lt;- lm(sim$y ~ sim$x)\n  return(invisible(sim))\n}\n\n\nNow we have a module that creates two objects, y and out and puts them inside sim. This all happens in the function called Init \nNext: the plot(out).",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to SpaDES Modules</span>"
    ]
  },
  {
    "objectID": "NewModuleIntro.html#events",
    "href": "NewModuleIntro.html#events",
    "title": "4  Introduction to SpaDES Modules",
    "section": "4.5 Events",
    "text": "4.5 Events\nWe can look at our 3 lines of example and think, “this is 2 steps: step 1 fit the model and step 2 plots it”. Of course, you could divide this up in several ways (or not at all), but we will go with this for now.\nWe can call the 2 steps events and imagine we could run them in sequence… first, lets put the plotting step in a function. We will choose the plotFun function. We will also add the sim$ because the out will come from another step and is in the sim “list”.\n\n\nCode\nplotFun &lt;- function(sim) {\n  plot(sim$out)\n  return(invisible(sim))\n}\n\n\nThe template already has some default code that actually puts the events in an order without us needing to do anything. It also has a parameter that determines whether the plot will happen or not (.plots). We will just accept the defaults for now.",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to SpaDES Modules</span>"
    ]
  },
  {
    "objectID": "NewModuleIntro.html#default-values",
    "href": "NewModuleIntro.html#default-values",
    "title": "4  Introduction to SpaDES Modules",
    "section": "4.6 Default Values",
    "text": "4.6 Default Values\nRecall, we don’t have a value for x. This means that if you run the following, you will get an error:\n\n\nCode\nSpaDES.core::simInitAndSpades(modules = \"My_linear_model\", paths = list(modulePath = \"tutos/NewModuleIntro\"))\n\n\nJust like functions in R, we can supply default values for our inputs. We put these in a function at the bottom called .inputObjects.\nCopy this to the module, replacing the contents of the template .inputObjects function.\n\n\nCode\n.inputObjects &lt;- function(sim) {\n  if (!suppliedElsewhere(\"x\", sim))\n    sim$x &lt;- rnorm(10, mean = 20, sd = 2)\n  return(invisible(sim))\n}\n\n\n!suppliedElsewhere(\"x\", sim) will check if x is in sim and if not, will run the subsequent code lines (see ?suppliedElsewhere).",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to SpaDES Modules</span>"
    ]
  },
  {
    "objectID": "NewModuleIntro.html#run-the-new-module",
    "href": "NewModuleIntro.html#run-the-new-module",
    "title": "4  Introduction to SpaDES Modules",
    "section": "4.7 Run the new module",
    "text": "4.7 Run the new module\nNow, we have inputs and outputs defined, our code has been places in 2 spots (events), and we have default value for x.\n\n\nCode\nSpaDES.core::simInitAndSpades(modules = \"My_linear_model\", paths = list(modulePath = \"tutos/NewModuleIntro\"))\n\n\nWe now have a SpaDES module that has metadata, generates random starting data (if the user doesn’t supply an alternative), fits a linear model, outputs that model, and plots the fit.",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to SpaDES Modules</span>"
    ]
  },
  {
    "objectID": "NewModuleIntro.html#questions",
    "href": "NewModuleIntro.html#questions",
    "title": "4  Introduction to SpaDES Modules",
    "section": "4.8 Questions",
    "text": "4.8 Questions\n\nWhat are some things we “gained” from putting our simple 3 lines of code into a module?\n\nWe can turn off plotting easily. Set .plotInitialTime = NA in the simInitAndSpades call.\n\nWhat are some things we “lost”?\n\nMore complicated. (overkill for these 3 lines?)\n\nWhat if we used an R package that wasn’t in the base packages list?\n\nSee ?defineModule for all the metadata items. Specifically, see reqdPkgs.\n\nWhat is the sim? See ?'.simList-class'",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to SpaDES Modules</span>"
    ]
  },
  {
    "objectID": "NewModuleIntro.html#see-also",
    "href": "NewModuleIntro.html#see-also",
    "title": "4  Introduction to SpaDES Modules",
    "section": "4.9 See also",
    "text": "4.9 See also\n?expectsInput,\n?createsOutput,\n?simInitAndSpades,\n?newModule",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction to SpaDES Modules</span>"
    ]
  },
  {
    "objectID": "ModulesAndEvents.html",
    "href": "ModulesAndEvents.html",
    "title": "5  Modules, Events and Functions",
    "section": "",
    "text": "5.1 Modules\nModules include the following elements:\nThere are many optional pieces too. The default template produces many of these optional pieces, which means it is “noisy”. This also means we can ignore most of it for now.\nOptional pieces include:\nThese are all contained within a file structure like this, with other optional files:\nTo make a new module, see: Chapter 4.",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Modules, Events and Functions</span>"
    ]
  },
  {
    "objectID": "ModulesAndEvents.html#modules",
    "href": "ModulesAndEvents.html#modules",
    "title": "5  Modules, Events and Functions",
    "section": "",
    "text": "a function call to defineModule that defines the metadata (mandatory)\na function definition for doEvent.moduleName (mandatory)\n\n\n\n\nother functions in the R folder or the main moduleName.R file\na documentation file (moduleName.rmd)\n\n\n/moduleRepository\n  |_ moduleName/\n      |_ R/                     # contains additional/optional .R (helper) files\n      |_ data/                  # directory for all included data\n          |_ CHECKSUMS.txt      # contains checksums for data files\n      |_ tests/                 # contains (optional) unit tests for module code\n      |_ citation.bib           # bibtex citation for the module\n      |_ LICENSE.txt            # describes module's legal usage\n      |_ moduleName.R           # module code file (incl. metadata)\n      |_ moduleName.Rmd         # documentation, usage info, etc.",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Modules, Events and Functions</span>"
    ]
  },
  {
    "objectID": "ModulesAndEvents.html#events",
    "href": "ModulesAndEvents.html#events",
    "title": "5  Modules, Events and Functions",
    "section": "5.2 Events",
    "text": "5.2 Events\nEvents are named chunks of code that can be scheduled to be run once or many times. These are scheduled with scheduleEvent(). There are several commonly occurring module types that can be grouped based on the events that they contain (see Section 5.4).\nTo see how to schedule events, see: Chapter 6.",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Modules, Events and Functions</span>"
    ]
  },
  {
    "objectID": "ModulesAndEvents.html#functions",
    "href": "ModulesAndEvents.html#functions",
    "title": "5  Modules, Events and Functions",
    "section": "5.3 Functions",
    "text": "5.3 Functions\nEssentially, everything in R is or uses functions. Modules define functions (doEvent.*moduleName*), events call specific functions (we some times call these “event functions”), and functions can be defined within modules, R packages, or user code.\n\n5.3.1 Rerun-tolerant functions\nIn re-usable workflows, functions become particularly effective if they are rerun-tolerant, see Tip 5.1 (we use tolerant in part to reflect the fact that the computer tolerates it but also the human because they don’t have to wait).\n\n\n\n\n\n\nTip 5.1\n\n\n\nFunctions are rerun-tolerant if they\n\nare rerun-efficient, meaning the first time they run they “do” something, but the second and subsequent times, they give the same output as the first time, but they skip the “doing” part\n\n\noptionally the efficiency can be by memory caching (“memoising”) and/or more persistent disk caching.\n\n\nand are rerun-robust, meaning they can be run error-free and with sensible or identical outputs (if inputs are the same) using any person’s computer.\n\n\n\nTo achieve these qualities, functions must use some sort of caching (i.e., evaluate the call and skip the content of the function if the call is deemed identical to a previous version of the call), and they must address any computer or operating system issues (such as paths, package dependencies etc.).\nBase R has some functions that are like this and some that are not. For example library is rerun-tolerant because it does something the first time, which may be slow, and subsequent times in the same session it is fast (memory efficient, but not disk efficient)\nTwo key functions help achieve these points, ?reproducible::Cache and ?reproducible::prepInputs\n\n\n5.3.2 Cache()\nCache() is a function that can be wrapped around other functions that turns that function into a rerun-tolerant function. reproducible::Cache has several important modifications that work for some objects that don’t cache well using “normal” caching, such as terra objects that are actually pointers to locations on disk rather than normal R objects.\nThe following code will result in d being the same vector as b, and it will be returned quickly.\n\n\nCode\nlibrary(reproducible)\n\na &lt;- rnorm(1e7)\nb &lt;- rnorm(1e7) |&gt; Cache()\nd &lt;- rnorm(1e7) |&gt; Cache()\n\n\nSee ?reproducible::Cache\n\n\n5.3.3 prepInputs()\nprepInputs() is a workhorse function that helps users point to cloud or local datasets: ?reproducible::prepInputs.\nIn this example, we point to a url only and prepInputs downloads it, does checksumming, unzips it and loads it into R using the default terra::vect because it is a shp file after the unzipping.\n\n\nCode\necozoneOfCanada &lt;- reproducible::prepInputs(\n  url = \"http://sis.agr.gc.ca/cansis/nsdb/ecostrat/zone/ecozone_shp.zip\")\n\n\nFor more information ?reproducible::prepInputs",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Modules, Events and Functions</span>"
    ]
  },
  {
    "objectID": "ModulesAndEvents.html#sec-moduletypes",
    "href": "ModulesAndEvents.html#sec-moduletypes",
    "title": "5  Modules, Events and Functions",
    "section": "5.4 Module types",
    "text": "5.4 Module types\nEven though all modules are built with the same structures (events & functions), for convenience, we can categorize different types of modules in different ways.\nFor example, modules can be categorized by:\n\n5.4.1 Static\nStatic modules can be defined as modules that “run once”. This means that they may have only one event. Or a sequence of events that occur one after the other with no rescheduling.\nThese could include: - Data preparation modules; - one (maybe just the “init” event) or few events and their primary goal is to get and deal with data; - GIS modules that do a number of GIS operations to get data into the necessary formats; - Data Visualization modules that specialize in creating a set of visuals from a known set of inputs.\n\n\n5.4.2 Dynamic\nDynamic modules are modules that have events that recur. There are at least 2 types of such models: those that have cyclic dependencies, i.e., its outputs are also its inputs (possibly with other modules in between) and those that do not.\n\nlandscape simulation modules (e.g., wildfire, vegetation change)\nwildlife population modules with Markov dependency (e.g., population matrix models)\nwildlife population modules without Markov-dependency (e.g., population models that only depend on habitat covariates)\nData Visualization modules that get used e.g., annually after other modules.\n\nIn Barros et al. (2023) we classified modules with respect to what the modules try to accomplish:\n\n“data/calibration modules” prepare model inputs and parameters\n“prediction/simulation modules” generate predictions using either static or dynamic mechanisms\n“validation modules” evaluate predictions against independent data.\n\nThere are no strict rules to classify a SpaDES module, just as there are no strict rule classify an R script.",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Modules, Events and Functions</span>"
    ]
  },
  {
    "objectID": "ModulesAndEvents.html#see-also",
    "href": "ModulesAndEvents.html#see-also",
    "title": "5  Modules, Events and Functions",
    "section": "5.5 See also",
    "text": "5.5 See also\nSee also: Chapter 6,\n?scheduleEvent,\n?P,\n?time,\n?start,\n?end",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Modules, Events and Functions</span>"
    ]
  },
  {
    "objectID": "ModulesAndEvents.html#more-learning-on-this-subject",
    "href": "ModulesAndEvents.html#more-learning-on-this-subject",
    "title": "5  Modules, Events and Functions",
    "section": "5.6 More learning on this subject",
    "text": "5.6 More learning on this subject\nMy First Module\nCreating a seed dispersal module\n\n\n\n\nBarros, Ceres, Yong Luo, Alex M. Chubaty, Ian M. S. Eddy, Tatiane Micheletti, Céline Boisvenue, David W. Andison, Steven G. Cumming, and Eliot J. B. McIntire. 2023. “Empowering Ecological Modellers with a PERFICT Workflow: Seamlessly Linking Data, Parameterisation, Prediction, Validation and Visualisation.” Methods in Ecology and Evolution 14 (1): 173–88. https://doi.org/10.1111/2041-210X.14034.",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Modules, Events and Functions</span>"
    ]
  },
  {
    "objectID": "Scheduling.html",
    "href": "Scheduling.html",
    "title": "6  Scheduling events",
    "section": "",
    "text": "6.1 Convert to a module\nIn the above code, there are 4 sections. These will each be copied into the SpaDES module below, in their respective sections. We have added 1 new section, called “Prediction”.\nCode\nSpaDES.core::newModule(name = \"scheduling\", path = \"tutos/scheduling\")\nOpen the module file, which will be printed in the console. Scroll down to the Init function and copy the Init, the .inputObjects, the Plot parts in the code above into the new module, as we did in Chapter 4.\nWe must make the same decisions about “local objects” (objects that are OK not to be kept for later) and about “global objects” (those that we want to keep). These global objects get put into sim. Your new module should have these 3 new sections/functions:\nCode\nInit &lt;- function(sim) {\n  y &lt;- sim$x + rnorm(10)\n  # fit a linear model\n  sim$out &lt;- lm(y ~ sim$x)\n  sim$pred &lt;- list()\n}\n\nplotFun &lt;- function(sim) {\n  sim$predictions &lt;- data.frame(year = rep(sim$years, each = 10), prediction = unlist(sim$pred))\n  # plot the predictions\n  sim$gg &lt;- ggplot(sim$predictions, aes(x = year, y = prediction, colour = year)) + geom_point() + geom_smooth()\n  print(sim$gg)\n}\n\n.inputObjects &lt;- function(sim) {\n  sim$x &lt;- rnorm(10)\n}",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Scheduling events</span>"
    ]
  },
  {
    "objectID": "Scheduling.html#new-event-function-prediction",
    "href": "Scheduling.html#new-event-function-prediction",
    "title": "6  Scheduling events",
    "section": "6.2 New Event Function – Prediction",
    "text": "6.2 New Event Function – Prediction\nThe new part is the for loop. This part takes new covariates (new values for y), emulating “predicted” covariates, derives a newly predicted x, and we then keep these predicted x values each year.\nWe’ll use scheduleEvent() below to do this iteration. For now, copy the Prediction part into a new function:\n\n\nCode\nPrediction &lt;- function(sim) {\n  startYear &lt;- 2023\n  sim$years &lt;- startYear:(startYear + 10) + 1\n  for (year in sim$years - startYear) {\n    sim$pred[[year]] &lt;- predict(sim$out, newdata = data.frame(y = rnorm(10) + year))\n  }\n  return(invisible(sim))\n}",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Scheduling events</span>"
    ]
  },
  {
    "objectID": "Scheduling.html#scheduling",
    "href": "Scheduling.html#scheduling",
    "title": "6  Scheduling events",
    "section": "6.3 Scheduling",
    "text": "6.3 Scheduling\nNow we need to tell SpaDES when to do and when to iterate each of the steps or “events”. The Init we do once, at the start. The plotFn we do once, but this time it is at the “end”. The .inputObjects always only happens once and “before the start” (Init) – it is scheduled automatically so nothing to do here. The last part (i.e., the prediction event) must happen 10 times, and it must start after Init and before the plotFn.\n\n6.3.1 doEvent\nThere is a special function in a SpaDES module called doEvent(). SpaDES calls this function once, passing the argument event = \"init\". That means that R will enter into this function only once and run only the init part, unless we specifically tell it to do more, using the scheduleEvent function.\nWe place this function anywhere we want inside doEvent, in general. In this example, we will place it in a few places.\n\n6.3.1.1 In the init event\nWe look at the init event (code inside event = \"init\") and we see 2 scheduleEvent calls that come with the template. We will use those to learn. In each “event”, we often see one part that “does something” and another part that “schedules something”.\nIn the default template, we “do” the Init function and we schedule plot and save. We can delete the save event, as we won’t do that here. But we will replace it with “schedule prediction”.\nSee ?start, ?scheduleEventhttps://rdrr.io/cran/SpaDES.core/man/scheduleEvent.html, ?P\n\n\nCode\nsim &lt;- Init(sim)\n\n# schedule future event(s)\nsim &lt;- scheduleEvent(sim, P(sim)$.plotInitialTime, \"scheduling\", \"plot\")\n# sim &lt;- scheduleEvent(sim, P(sim)$.saveInitialTime, \"scheduling\", \"save\")\n\n# here we create a new event type == \"predictions\" and we schedule it for `start(sim)`\nsim &lt;- scheduleEvent(sim, start(sim), \"scheduling\", \"predictions\") \n\n\nCopy the above code chunk to the init section so that it looks like this:\n\n\nCode\nswitch(\n  eventType,\n  init = {\n    sim &lt;- Init(sim)\n    \n    # schedule future event(s)\n    sim &lt;- scheduleEvent(sim, P(sim)$.plotInitialTime, \"scheduling\", \"plot\")\n    \n    # here we create a new event type == \"predictions\" and we schedule it for `start(sim)`\n    sim &lt;- scheduleEvent(sim, start(sim), \"scheduling\", \"predictions\") \n  },\n  ...\n)\n\n\n\n\n\n6.3.2 The new event\nWe add code to make a new event, called \"predictions\" (the name must match what we wrote in the scheduleEvent above). In this event, we “do” the prediction, then we schedule the next prediction at “time plus 1”\nSee ?time.\n\n\nCode\nswitch(\n  eventType,\n  init = {...},\n  predictions = {\n    # do the Prediction\n    sim &lt;- Prediction(sim)\n    \n    # schedule the next Prediction\n    sim &lt;- scheduleEvent(sim, time(sim) + 1, \"scheduling\", \"predictions\") \n  },\n  ...\n)\n\n\n\n\n6.3.3 Double check existing events\nIf we ran the above changes, we would see an error because plotFn is, by default, scheduled to run at the time that is specified by .plotInitialTime, which by default is start(sim). We have no data yet at that time. So, we have to schedule plotFn to run at end(sim):\n\n\nCode\nscheduleEvent(sim, end(sim), \"scheduling\", \"plot\")\n\n\n\n\n6.3.4 Update module metadata\nLike in Chapter 4, we have to update the module metadata… what the inputs, outputs, parameters are. SpaDES will not error if the metadata are not correct, but it will try to point out the problems.\nHere’s an example:\n\n\nCode\ncreatesOutput(objectName = \"predictions\", objectClass = \"data.frame\", \n              desc = \"Table of predictions and years\")",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Scheduling events</span>"
    ]
  },
  {
    "objectID": "Scheduling.html#run",
    "href": "Scheduling.html#run",
    "title": "6  Scheduling events",
    "section": "6.4 Run",
    "text": "6.4 Run\nThe resulting module can now be run.\n\n\nCode\nSpaDES.core::simInitAndSpades(modules = \"scheduling\", paths = list(modulePath = \"tutos/scheduling\"))\n\n\nA complete version of this new module can be found at scheduling.R. You can copy this over top of the new module that you created here, i.e., keep the same folder structure.",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Scheduling events</span>"
    ]
  },
  {
    "objectID": "Scheduling.html#questions",
    "href": "Scheduling.html#questions",
    "title": "6  Scheduling events",
    "section": "6.5 Questions",
    "text": "6.5 Questions\n\nhow are some ways that scheduleEvent is different from a “loop”?\n\nWe can change the “step” length between events.\nWe can interweave events, e.g., a fire event then a tree growth event\n\n\n\n\nWhen is a loop better than scheduling?\n\nLoops are much faster than scheduling.\nBut really, avoid loops in R if you can help it\n\n\n\n\nChances are that the first versions of this module didn’t work. How do you fix it?\n\nLearn how to debug in R and SpaDES",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Scheduling events</span>"
    ]
  },
  {
    "objectID": "Scheduling.html#see-also",
    "href": "Scheduling.html#see-also",
    "title": "6  Scheduling events",
    "section": "6.6 See also",
    "text": "6.6 See also\n?scheduleEvent,\n?P,\n?time,\n?start,\n?end",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Scheduling events</span>"
    ]
  },
  {
    "objectID": "Scheduling.html#more-learning-on-this-subject",
    "href": "Scheduling.html#more-learning-on-this-subject",
    "title": "6  Scheduling events",
    "section": "6.7 More learning on this subject",
    "text": "6.7 More learning on this subject\nMy First Module\nCreating a seed dispersal module",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Scheduling events</span>"
    ]
  },
  {
    "objectID": "simList.html",
    "href": "simList.html",
    "title": "7  The simList - What is it?",
    "section": "",
    "text": "7.1 Where does simList come from?\nThere are 2 main ways in SpaDES.core to create a simList:",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>The `simList` - What is it?</span>"
    ]
  },
  {
    "objectID": "simList.html#where-does-simlist-come-from",
    "href": "simList.html#where-does-simlist-come-from",
    "title": "7  The simList - What is it?",
    "section": "",
    "text": "using simInit() creates a simList object.\nusing spades() , which returns a modified simList object.",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>The `simList` - What is it?</span>"
    ]
  },
  {
    "objectID": "simList.html#how-can-we-specify-a-simlist",
    "href": "simList.html#how-can-we-specify-a-simlist",
    "title": "7  The simList - What is it?",
    "section": "7.2 How can we specify a simList?",
    "text": "7.2 How can we specify a simList?\nA simList object is simply a structured data type containing various elements.\nThe main components of a simList are:\n\nA list of modules used;\nThe event queue;\nA description of the data (object) dependencies.",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>The `simList` - What is it?</span>"
    ]
  },
  {
    "objectID": "simList.html#how-spades-works-simlists",
    "href": "simList.html#how-spades-works-simlists",
    "title": "7  The simList - What is it?",
    "section": "7.3 How SpaDES works: simLists",
    "text": "7.3 How SpaDES works: simLists\nWe can examine the simList object structure in the usual R fashion by printing (showing) it, or by using str():\n\n\nCode\nemptySim &lt;- simInit()\nemptySim  # same as show(emptySim)\nstr(emptySim)\n\n\nNOTE: simLists are S4 objects, so we can use getSlots() and slotNames() to examine the object.\nSee also ?'.simList-class'",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>The `simList` - What is it?</span>"
    ]
  },
  {
    "objectID": "simList.html#accessing-the-parts-of-a-simlists",
    "href": "simList.html#accessing-the-parts-of-a-simlists",
    "title": "7  The simList - What is it?",
    "section": "7.4 Accessing the parts of a simLists",
    "text": "7.4 Accessing the parts of a simLists\n\n\n\nSetting:\n  options(\n    reproducible.cachePath = 'C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/reproducible/cache'\n    spades.inputPath = 'C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/SpaDES/inputs'\n    spades.outputPath = 'C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/SpaDES/outputs'\n    spades.modulePath = 'C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/SpaDES/modules'\n    spades.scratchPath = 'C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/SpaDES/scratch'\n  )\n\n\nMay07 23:12:22 simInit Using setDTthreads(1). To change: 'options(spades.DTthreads = X)'.\n\n\nElpsed time for simInit: 0.191052 secs\n\n\n\n\n\n\nslot\naccessor\n\n\n\n\nmodules\nmodules()\n\n\nparams\nparams()\n\n\nevents\nevents()\n\n\ncurrent\ncurrent()\n\n\ncompleted\ncompleted()\n\n\ndepends\ndepends()\n\n\nsimtimes\ntimes()\n\n\ninputs\ninputs()\n\n\noutputs\noutputs()\n\n\npaths\npaths()\n\n\n.envir\nenvir()\n\n\n.xData\nobjects()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nother_accessors\n\n\n\n\npackages()\n\n\nglobals()\n\n\nstart()\n\n\nend()\n\n\ntimeunit()\n\n\ntimeunits()\n\n\npaths()\n\n\ncachePath()\n\n\ninputPath()\n\n\noutputPath()\n\n\nmodulePath()",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>The `simList` - What is it?</span>"
    ]
  },
  {
    "objectID": "simList.html#model-specification",
    "href": "simList.html#model-specification",
    "title": "7  The simList - What is it?",
    "section": "7.5 Model specification",
    "text": "7.5 Model specification\nSimple examples (using demo modules) of simInit() and spades() calls.\n\nexamine simList structure before and after the spades() call\n\n\n7.5.1 Initiliaze an empty simList object\n\n\nCode\nemptySim &lt;- simInit()\n\n\nSetting:\n  options(\n    reproducible.cachePath = 'C:/Users/cbarros/AppData/Local/Temp/Rtmp4ktWut/reproducible/cache'\n    spades.inputPath = 'C:/Users/cbarros/AppData/Local/Temp/Rtmp4ktWut/SpaDES/inputs'\n    spades.outputPath = 'C:/Users/cbarros/AppData/Local/Temp/Rtmp4ktWut/SpaDES/outputs'\n    spades.modulePath = 'C:/Users/cbarros/AppData/Local/Temp/Rtmp4ktWut/SpaDES/modules'\n    spades.scratchPath = 'C:/Users/cbarros/AppData/Local/Temp/Rtmp4ktWut/SpaDES/scratch'\n  )\n\n\nMay31 16:34:16 simInit Using setDTthreads(1). To change: 'options(spades.DTthreads = X)'.\n\n\nElpsed time for simInit: 0.06326294 secs\n\n\n\n\nSetting:\n  options(\n    reproducible.cachePath = 'C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/reproducible/cache'\n    spades.inputPath = 'C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/SpaDES/inputs'\n    spades.outputPath = 'C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/SpaDES/outputs'\n    spades.modulePath = 'C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/SpaDES/modules'\n    spades.scratchPath = 'C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/SpaDES/scratch'\n  )\n\n\nMay07 23:12:22 simInit Using setDTthreads(1). To change: 'options(spades.DTthreads = X)'.\n\n\nElpsed time for simInit: 0.1008449 secs\n\n\n\n\n7.5.2 Inspect the empty simList object\n\nWhat are the names of each of the slots in the simList?\nWhat do each of these slots contain? Hint: see ?.simList-class\n\n\n\nCode\nstr(emptySim)\n\n\nFormal class 'simList' [package \"SpaDES.core\"] with 12 slots\n  ..@ modules  :List of 4\n  .. ..$ : chr \"checkpoint\"\n  .. ..$ : chr \"save\"\n  .. ..$ : chr \"progress\"\n  .. ..$ : chr \"load\"\n  .. ..- attr(*, \"modulesGraph\")='data.frame':  0 obs. of  2 variables:\n  .. .. ..$ from: chr(0) \n  .. .. ..$ to  : chr(0) \n  ..@ params   :List of 2\n  .. ..$ .progress :List of 2\n  .. .. ..$ type    : chr NA\n  .. .. ..$ interval: num NA\n  .. ..$ checkpoint:List of 2\n  .. .. ..$ interval: num NA\n  .. .. ..$ file    : NULL\n  ..@ events   :List of 4\n  .. ..$ :List of 4\n  .. .. ..$ eventTime    : num 0\n  .. .. .. ..- attr(*, \"unit\")= chr \"second\"\n  .. .. ..$ moduleName   : chr \"checkpoint\"\n  .. .. ..$ eventType    : chr \"init\"\n  .. .. ..$ eventPriority: num 0\n  .. ..$ :List of 4\n  .. .. ..$ eventTime    : num 0\n  .. .. .. ..- attr(*, \"unit\")= chr \"second\"\n  .. .. ..$ moduleName   : chr \"save\"\n  .. .. ..$ eventType    : chr \"init\"\n  .. .. ..$ eventPriority: num 0\n  .. ..$ :List of 4\n  .. .. ..$ eventTime    : num 0\n  .. .. .. ..- attr(*, \"unit\")= chr \"second\"\n  .. .. ..$ moduleName   : chr \"progress\"\n  .. .. ..$ eventType    : chr \"init\"\n  .. .. ..$ eventPriority: num 0\n  .. ..$ :List of 4\n  .. .. ..$ eventTime    : num 0\n  .. .. .. ..- attr(*, \"unit\")= chr \"second\"\n  .. .. ..$ moduleName   : chr \"load\"\n  .. .. ..$ eventType    : chr \"init\"\n  .. .. ..$ eventPriority: num 0\n  ..@ current  : list()\n  ..@ completed:&lt;environment: 0x00000160863c9708&gt; \n  ..@ depends  :Formal class '.simDeps' [package \"SpaDES.core\"] with 1 slot\n  .. .. ..@ dependencies:List of 1\n  .. .. .. ..$ : NULL\n  ..@ simtimes :List of 4\n  .. ..$ current : num 0\n  .. .. ..- attr(*, \"unit\")= chr \"second\"\n  .. ..$ start   : num 0\n  .. .. ..- attr(*, \"unit\")= chr \"second\"\n  .. ..$ end     : num 3.16e+08\n  .. .. ..- attr(*, \"unit\")= chr \"second\"\n  .. ..$ timeunit: chr \"year\"\n  ..@ inputs   :'data.frame':   0 obs. of  8 variables:\n  .. ..$ file      : chr(0) \n  .. ..$ fun       : chr(0) \n  .. ..$ package   : chr(0) \n  .. ..$ objectName: chr(0) \n  .. ..$ loadTime  : num(0) \n  .. ..$ loaded    : logi(0) \n  .. ..$ arguments : list()\n  .. .. ..- attr(*, \"class\")= chr \"AsIs\"\n  .. ..$ intervals : num(0) \n  ..@ outputs  :'data.frame':   0 obs. of  7 variables:\n  .. ..$ file      : chr(0) \n  .. ..$ fun       : chr(0) \n  .. ..$ package   : chr(0) \n  .. ..$ objectName: chr(0) \n  .. ..$ saveTime  : num(0) \n  .. ..$ saved     : logi(0) \n  .. ..$ arguments : list()\n  .. .. ..- attr(*, \"class\")= chr \"AsIs\"\n  ..@ paths    :List of 7\n  .. ..$ cachePath  : chr \"C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/reproducible/cache\"\n  .. ..$ inputPath  : chr \"C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/SpaDES/inputs\"\n  .. ..$ modulePath : chr \"C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/SpaDES/modules\"\n  .. ..$ outputPath : chr \"C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/SpaDES/outputs\"\n  .. ..$ rasterPath : chr \"C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/SpaDES/scratch/raster\"\n  .. ..$ scratchPath: chr \"C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/SpaDES/scratch\"\n  .. ..$ terraPath  : chr \"C:/Users/cbarros/AppData/Local/Temp/Rtmpq8o9hm/SpaDES/scratch/terra\"\n  ..@ .envir   :&lt;environment: 0x00000160863bbd60&gt; \n  .. ..- attr(*, \"name\")= chr \"sim\"\n  ..@ .xData   :&lt;environment: 0x00000160863bbd60&gt; \n  .. ..- attr(*, \"name\")= chr \"sim\"\n\n\nCode\nslotNames(emptySim)\n\n\n [1] \"modules\"   \"params\"    \"events\"    \"current\"   \"completed\" \"depends\"  \n [7] \"simtimes\"  \"inputs\"    \"outputs\"   \"paths\"     \".envir\"    \".xData\"   \n\n\nCode\ngetSlots('simList')\n\n\n      modules        params        events       current     completed \n       \"list\"        \"list\"        \"list\"        \"list\" \"environment\" \n      depends      simtimes        inputs       outputs         paths \n   \".simDeps\"        \"list\"  \"data.frame\"  \"data.frame\"        \"list\" \n       .envir        .xData \n\"environment\" \"environment\" \n\n\nCode\n?'.simList-class'\n\n\nNo documentation for '.simList-class' in specified packages and libraries:\nyou could try '??.simList-class'\n\n\n\n\n7.5.3 Inspect the new simList object\nUse the simList accessor functions to determine the following:\n\nthe modules included in the simulation and their package dependencies;\nthe global parameter values used;\nthe module-specific parameter values used;\nthe simulation start and end times;\nthe timeunits used by the modules in the simulation;\nthe scheduled and completed event queues;\nthe objects (functions, data, etc.) used in the simulation;\nthe file paths used for simulation inputs and outputs.\n\n\n\nCode\n# list modules used in the simulation\nmodules(mySim)\n\n# list module dependencies and packages used\ndepends(mySim)\npackages(mySim)\n\n# list global and module-specific param values\nglobals(mySim)\nparams(mySim)\nP(mySim)       ## bonus: how do params() and P() differ?\n\n# list start and end times\ntimes(mySim)\nstart(mySim)\nend(mySim)\n\n# get the simulation and module timeunits\ntimeunit(mySim)\ntimeunits(mySim)\n\n# get the scheduled and completed event queues\nevents(mySim)\ncompleted(mySim)\n\n# list the objects (functions, data, etc.) stored in the simList\nobjects(mySim)\n\n# list the file paths used in the simulation\npaths(mySim)\ninputPath(mySim)\noutputPath(mySim)\n\n\n\n\n7.5.4 Run the simulation\n\n\nCode\ndev()\nmySimOut &lt;- Copy(mySim) ## make a deep copy of the simList\nmySimOut &lt;- spades(mySimOut)\n\n\n\n\n7.5.5 Compare the simList before and after\n\n\nCode\ntimes(mySim)\ntimes(mySimOut)\n\nobjects(mySim)\nobjects(mySimOut)",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>The `simList` - What is it?</span>"
    ]
  },
  {
    "objectID": "simList.html#see-also",
    "href": "simList.html#see-also",
    "title": "7  The simList - What is it?",
    "section": "7.6 See also",
    "text": "7.6 See also\n?.simList-class\n?simInit\n?spades",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>The `simList` - What is it?</span>"
    ]
  },
  {
    "objectID": "ModuleInputs.html",
    "href": "ModuleInputs.html",
    "title": "8  Module Inputs",
    "section": "",
    "text": "8.1 How to supply Inputs\nThere are several ways to get objects into the simList:\nUltimately, it is the last of these that is the power of SpaDES. i.e., modularity.",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Module Inputs</span>"
    ]
  },
  {
    "objectID": "ModuleInputs.html#how-to-supply-inputs",
    "href": "ModuleInputs.html#how-to-supply-inputs",
    "title": "8  Module Inputs",
    "section": "",
    "text": "User passes during simInit:\n\nusing the objects argument (if it is an object);\nusing the inputs argument (if it is from disk);\n\nDeveloper creates defaults and specifies them in .inputObjects;\nA different module creates them prior to the running of this module.\n\n\n\n8.1.1 During simInit\nA user can directly pass objects into the simInit and these will be put into the simList\n\n\nCode\na &lt;- 1\nsim &lt;- SpaDES.core::simInit(objects = list(a = a))\n\n\nor do pass them via an .rds file\n\n\nCode\nb &lt;- 1\ntf &lt;- tempfile(fileext = \".rds\")\nsaveRDS(b, file = tf)\nsim &lt;- SpaDES.core::simInit(inputs = data.frame(object = \"b\", file = tf))\n# now it is \"sim$b\"\n\n\nSee ?SpaDES.core::simInit.\n\n\n8.1.2 .inputObjects\nFor every Input that is specified in the metadata, the module developer has the option of specifying a default. In R, functions can be given defaults when they are defined like this:\n\n\nCode\nrnormMean5 &lt;- function(n = 1) { # the n = 1 is the default value\n  rnorm(n = n, mean = 5)\n}\nrnormMean5() # can be run without any arguments\n\n\nThis works for only the simplest cases. In the case of a module, objects can be arbitrarily complicated and so this approach will not be suitable.\nInstead, there is a function that is called every time a module is initialized (i.e. by simInit()) where a developer can put anything they want to specify as defaults. It is generally most useful to use if (!SpaDES.core::suppliedElsewhere(\"obj\", sim)) i.e., if the object isn’t in sim, then give it a value.\n\n\nCode\n.inputObjects &lt;- function(sim) {\n\n  if (!suppliedElsewhere(\"y\", sim)) {\n    sim$y &lt;- rnorm(100)\n  }\n\n  return(sim)\n}\n\n\n\n8.1.2.1 Advanced .inputObjects example\nIn the Biomass_core module (this is an implementation of the LANDIS-II Biomass Succession Extension v3.2), there are many Inputs as defined in the metadata. The module needs each one of these to work.\nThe developers have created a .inputObjects function that will fill in these Inputs with defaults if the user hasn’t supplied them (using !SpaDES.core::suppliedElsewhere()).\nWe will look at a few examples in this module: Biomass_core::.inputObjects.\nFirst, an object called studyArea. The developer tests whether it exists and creates an error if it does not exist.\nSecond, some GIS tests that evaluate whether 2 objects are in the same CRS (i.e., they need to be the same projection, etc., for this module to work)\nThird, if an object is missing, it may make sense to fill in the details with parameters from the Internet.\n\n\n\n8.1.3 From another module\nWe will leave this section for the Chapter 12 chapter, where we are work with multiple modules.",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Module Inputs</span>"
    ]
  },
  {
    "objectID": "ModuleInputs.html#questions",
    "href": "ModuleInputs.html#questions",
    "title": "8  Module Inputs",
    "section": "8.2 Questions",
    "text": "8.2 Questions\n\nIn .inputObjects, why don’t we just write if (!is.null(sim$y))? See ?SpaDES.core::suppliedElsewhere\n\nIt turns out that other modules may create this object “after” this module is run, and this test will fail.",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Module Inputs</span>"
    ]
  },
  {
    "objectID": "ModuleInputs.html#see-also",
    "href": "ModuleInputs.html#see-also",
    "title": "8  Module Inputs",
    "section": "8.3 See also",
    "text": "8.3 See also\n?SpaDES.core::suppliedElsewhere\n?SpaDES.core::expectsInputs\n?SpaDES.core::simInit",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Module Inputs</span>"
    ]
  },
  {
    "objectID": "Caching.html",
    "href": "Caching.html",
    "title": "9  Introduction to Cache",
    "section": "",
    "text": "10 How to use Cache\nThe Cache function can be used with any function. A user can wrap it around another function call or use the base pipe operator |&gt;. The following two calls are the same, and thus the 2nd one will result in the identical output to the first:\nCode\nlibrary(reproducible)\nreproducible::Cache(rnorm(1))\n\n\n[1] 0.1654223\nattr(,\".Cache\")\nattr(,\".Cache\")$newCache\n[1] TRUE\n\nattr(,\"tags\")\n[1] \"cacheId:422bae4ed2f770cc\"\nattr(,\"call\")\n[1] \"\"\n\n\nCode\nrnorm(1) |&gt;\n  reproducible::Cache()\n\n\n[1] 0.1654223\nattr(,\".Cache\")\nattr(,\".Cache\")$newCache\n[1] FALSE\n\nattr(,\"tags\")\n[1] \"cacheId:422bae4ed2f770cc\"\nattr(,\"call\")\n[1] \"\"\nSee ?reproducible::Cache for many more examples.",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Cache</span>"
    ]
  },
  {
    "objectID": "Caching.html#caching-examples",
    "href": "Caching.html#caching-examples",
    "title": "9  Introduction to Cache",
    "section": "11.1 Caching examples",
    "text": "11.1 Caching examples\n\n11.1.1 Basic cache use with tags\nWe can add tags to identify the Cache call.\n\n\nCode\nranNumsA &lt;- Cache(rnorm, 4, userTags = c(\"random number generator\"))\n\nshowCache(userTags = \"random number generator\")\n\n\n             cacheId                  tagKey                  tagValue\n              &lt;char&gt;                  &lt;char&gt;                    &lt;char&gt;\n 1: ad0ea27476c50b66 random number generator   random number generator\n 2: ad0ea27476c50b66                function                     rnorm\n 3: ad0ea27476c50b66                   class                   numeric\n 4: ad0ea27476c50b66             object.size                      1008\n 5: ad0ea27476c50b66                accessed 2024-06-04 11:57:45.40033\n 6: ad0ea27476c50b66                 inCloud                     FALSE\n 7: ad0ea27476c50b66                fromDisk                     FALSE\n 8: ad0ea27476c50b66              resultHash                          \n 9: ad0ea27476c50b66       elapsedTimeDigest          0.008540154 secs\n10: ad0ea27476c50b66     elapsedTimeFirstRun         7.605553e-05 secs\n11: ad0ea27476c50b66          otherFunctions                   execute\n12: ad0ea27476c50b66          otherFunctions              process_file\n13: ad0ea27476c50b66          otherFunctions             process_group\n14: ad0ea27476c50b66          otherFunctions                call_block\n15: ad0ea27476c50b66          otherFunctions                block_exec\n16: ad0ea27476c50b66          otherFunctions                     eng_r\n17: ad0ea27476c50b66          otherFunctions              in_input_dir\n18: ad0ea27476c50b66          otherFunctions                    in_dir\n19: ad0ea27476c50b66          otherFunctions                 timing_fn\n20: ad0ea27476c50b66          otherFunctions                    handle\n21: ad0ea27476c50b66               preDigest        n:7eef4eae85fd9229\n22: ad0ea27476c50b66               preDigest     mean:c40c00762a0dac94\n23: ad0ea27476c50b66               preDigest       sd:853b1797f54b229c\n24: ad0ea27476c50b66               preDigest     .FUN:4f604aa46882b368\n             cacheId                  tagKey                  tagValue\n                   createdDate\n                        &lt;char&gt;\n 1: 2024-06-04 11:57:45.400854\n 2: 2024-06-04 11:57:45.400854\n 3: 2024-06-04 11:57:45.400854\n 4: 2024-06-04 11:57:45.400854\n 5: 2024-06-04 11:57:45.400854\n 6: 2024-06-04 11:57:45.400854\n 7: 2024-06-04 11:57:45.400854\n 8: 2024-06-04 11:57:45.400854\n 9: 2024-06-04 11:57:45.400854\n10: 2024-06-04 11:57:45.400854\n11: 2024-06-04 11:57:45.400854\n12: 2024-06-04 11:57:45.400854\n13: 2024-06-04 11:57:45.400854\n14: 2024-06-04 11:57:45.400854\n15: 2024-06-04 11:57:45.400854\n16: 2024-06-04 11:57:45.400854\n17: 2024-06-04 11:57:45.400854\n18: 2024-06-04 11:57:45.400854\n19: 2024-06-04 11:57:45.400854\n20: 2024-06-04 11:57:45.400854\n21: 2024-06-04 11:57:45.400854\n22: 2024-06-04 11:57:45.400854\n23: 2024-06-04 11:57:45.400854\n24: 2024-06-04 11:57:45.400854\n                   createdDate",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Cache</span>"
    ]
  },
  {
    "objectID": "Caching.html#clean-up-cache",
    "href": "Caching.html#clean-up-cache",
    "title": "9  Introduction to Cache",
    "section": "11.2 Clean up cache",
    "text": "11.2 Clean up cache\nWe can use either clearCache, keepCache, or cc to remove things from the Cache database. clearCache removes everything that matches the query. keepCache keeps everything that matches the query. cc removes the most recent entry (i.e., it is a shorthand for a commonly used option).\n\n\nCode\n# Two different funcxtions\na &lt;- rnorm(1) |&gt; Cache()\nb &lt;- runif(1) |&gt; Cache()\n\n# Clear only the first one\nclearCache(userTags = \"rnorm\", ask = FALSE)\na2 &lt;- rnorm(1) |&gt; Cache()\nb2 &lt;- runif(1) |&gt; Cache()\n\n# b2 and b are still identical; a and a2 are not\na == a2 # FALSE\n\n\n[1] FALSE\n\n\nCode\nb == b2 # TRUE\n\n\n[1] TRUE\n\n\nCode\n# This time keep ONLY the rnorm\nkeepCache(userTags = \"rnorm\", ask = FALSE)\n\n\n             cacheId              tagKey                  tagValue\n              &lt;char&gt;              &lt;char&gt;                    &lt;char&gt;\n 1: 422bae4ed2f770cc            function                     rnorm\n 2: 422bae4ed2f770cc               class                   numeric\n 3: 422bae4ed2f770cc         object.size                       984\n 4: 422bae4ed2f770cc            accessed 2024-06-04 11:57:45.53107\n 5: 422bae4ed2f770cc             inCloud                     FALSE\n 6: 422bae4ed2f770cc            fromDisk                     FALSE\n 7: 422bae4ed2f770cc          resultHash                          \n 8: 422bae4ed2f770cc   elapsedTimeDigest          0.002660036 secs\n 9: 422bae4ed2f770cc elapsedTimeFirstRun         6.914139e-05 secs\n10: 422bae4ed2f770cc      otherFunctions                   execute\n11: 422bae4ed2f770cc      otherFunctions              process_file\n12: 422bae4ed2f770cc      otherFunctions             process_group\n13: 422bae4ed2f770cc      otherFunctions                call_block\n14: 422bae4ed2f770cc      otherFunctions                block_exec\n15: 422bae4ed2f770cc      otherFunctions                     eng_r\n16: 422bae4ed2f770cc      otherFunctions              in_input_dir\n17: 422bae4ed2f770cc      otherFunctions                    in_dir\n18: 422bae4ed2f770cc      otherFunctions                 timing_fn\n19: 422bae4ed2f770cc      otherFunctions                    handle\n20: 422bae4ed2f770cc           preDigest        n:853b1797f54b229c\n21: 422bae4ed2f770cc           preDigest     mean:c40c00762a0dac94\n22: 422bae4ed2f770cc           preDigest       sd:853b1797f54b229c\n23: 422bae4ed2f770cc           preDigest     .FUN:4f604aa46882b368\n             cacheId              tagKey                  tagValue\n                  createdDate\n                       &lt;char&gt;\n 1: 2024-06-04 11:57:45.53157\n 2: 2024-06-04 11:57:45.53157\n 3: 2024-06-04 11:57:45.53157\n 4: 2024-06-04 11:57:45.53157\n 5: 2024-06-04 11:57:45.53157\n 6: 2024-06-04 11:57:45.53157\n 7: 2024-06-04 11:57:45.53157\n 8: 2024-06-04 11:57:45.53157\n 9: 2024-06-04 11:57:45.53157\n10: 2024-06-04 11:57:45.53157\n11: 2024-06-04 11:57:45.53157\n12: 2024-06-04 11:57:45.53157\n13: 2024-06-04 11:57:45.53157\n14: 2024-06-04 11:57:45.53157\n15: 2024-06-04 11:57:45.53157\n16: 2024-06-04 11:57:45.53157\n17: 2024-06-04 11:57:45.53157\n18: 2024-06-04 11:57:45.53157\n19: 2024-06-04 11:57:45.53157\n20: 2024-06-04 11:57:45.53157\n21: 2024-06-04 11:57:45.53157\n22: 2024-06-04 11:57:45.53157\n23: 2024-06-04 11:57:45.53157\n                  createdDate\n\n\nCode\na3 &lt;- rnorm(1) |&gt; Cache()\nb3 &lt;- runif(1) |&gt; Cache()\n\n# b2 and b are still identical; a and a2 are not\na2 == a3 # TRUE\n\n\n[1] TRUE\n\n\nCode\nb2 == b3 # FALSE\n\n\n[1] FALSE",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Cache</span>"
    ]
  },
  {
    "objectID": "Caching.html#nested-caching",
    "href": "Caching.html#nested-caching",
    "title": "9  Introduction to Cache",
    "section": "11.3 Nested Caching",
    "text": "11.3 Nested Caching\nNested caching, which is when Caching of a function occurs inside an outer function, which is itself cached. This is a critical element to working within a reproducible work flow. Ideally, at all points in a development cycle, it should be possible to get to any line of code starting from the very initial steps, running through everything up to that point, in less than a few seconds. If the workflow can be kept very fast like this, it will be very likely to work at any point it is tested.\nIn the example here, we run an outer function that calls an inner function. If we decide to change the outer function along the way, and the inner function is unaffected, then we can still recover the cached version of the inner call.\nWarning this will not necessarily work the other way, i.e., if inner is changed, we won’t notice until we clearCache and rerun.\n\n\nCode\n# Make 2 functions\ninner &lt;- function(mean) {\n  d &lt;- 1\n  Cache(rnorm(3, mean = mean))\n}\nouter &lt;- function(n) {\n  Cache(inner(0.1))\n}\n\n# Call outer function\nCache(outer(n = 2))\n\n\n[1] -0.1123263 -1.4925555  1.1335128\nattr(,\".Cache\")\nattr(,\".Cache\")$newCache\n[1] TRUE\n\nattr(,\"tags\")\n[1] \"cacheId:aa5fa876944e27be\"\nattr(,\"call\")\n[1] \"\"\n\n\nCode\n# Change outer function\nouter &lt;- function(n) {\n  a &lt;- 0.1\n  Cache(inner(a))\n}\n\n# Still recovers inner \nCache(outer(n = 2))\n\n\n[1] -0.1123263 -1.4925555  1.1335128\nattr(,\".Cache\")\nattr(,\".Cache\")$newCache\n[1] TRUE\n\nattr(,\"tags\")\n[1] \"cacheId:293cb55e4c25d110\"\nattr(,\"call\")\n[1] \"\"\n\n\nCode\n# BUT if we change the inner, it won't work\ninner &lt;- function(mean) {\n  d &lt;- 2                        # Changed d\n  Cache(rnorm(3, mean = mean))\n}\nCache(outer(n = 2))\n\n\n[1] -0.1123263 -1.4925555  1.1335128\nattr(,\".Cache\")\nattr(,\".Cache\")$newCache\n[1] FALSE\n\nattr(,\"tags\")\n[1] \"cacheId:293cb55e4c25d110\"\nattr(,\"call\")\n[1] \"\"",
    "crumbs": [
      "SpaDES 101",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Introduction to Cache</span>"
    ]
  },
  {
    "objectID": "setupProject.html",
    "href": "setupProject.html",
    "title": "SpaDES workflows and projects",
    "section": "",
    "text": "One of the advantages of SpaDES is that we can make simple “linear” workflows, but we can also make complex workflows emerge from the combinations of modules (and of their events) being put together by a user. SpaDES modules provide their own needed schedules, and the metadata tells SpaDES how different modules fit together. Then when executed, events within and across modules go in the correct order. Then if the group of modules changes, the workflow steps may also change.\nIn this section, we will start with the simplest case of 2 chunks in sequence, and we will advance to chain together many modules and rich project workflows with SpaDES.project.",
    "crumbs": [
      "SpaDES workflows and projects"
    ]
  },
  {
    "objectID": "workflowSimple1.html",
    "href": "workflowSimple1.html",
    "title": "10  Simple workflow with 2 chunks",
    "section": "",
    "text": "10.1 Using SpaDES.core::newModule",
    "crumbs": [
      "SpaDES workflows and projects",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Simple workflow with 2 chunks</span>"
    ]
  },
  {
    "objectID": "workflowSimple1.html#using-spades.corenewmodule",
    "href": "workflowSimple1.html#using-spades.corenewmodule",
    "title": "10  Simple workflow with 2 chunks",
    "section": "",
    "text": "10.1.1 Some R code to convert\nWe will start by thinking about metadata: What is metadata?\nWe can examine the following code chunk. First, we ask: what are the inputs and the outputs?\n\n\nCode\n# create some data\nx &lt;- rnorm(10)\ny &lt;- x + rnorm(10)\n# fit a linear model\nout &lt;- lm(y ~ x)\n\n# plot the fit\nplot(out)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamining this, we have 4 lines: make some data, fit a model, visualize the fit.\nLets imagine that the first 3 lines are conceptually different – fit a dummy model – and the last line is conceptually “unique” – visualize it. Lets put these into 2 “modules”, and then run them in sequence.\nFor now, we just say, if you want to keep an object, assign it to “sim”. We will explain this in much more detail later. Here, we want to keep the model that we fit. But we don’t care about the x and y. We only assign the model to sim.\n\n\nCode\nlibrary(SpaDES.core)\nnm1 &lt;- \"modelFit\"\nmodulePath &lt;- Require::tempdir2()\nnewModule(nm1, path = modulePath, open = FALSE,\n          events = list(\n            init = {\n              x &lt;- rnorm(10)\n              y &lt;- rnorm(10) + x\n              sim$model &lt;- lm(y ~ x)\n              return(sim)\n            }\n          )\n)\n\n\nThen we run it:\n\n\nCode\n# Run just the first module\nout1 &lt;- simInitAndSpades(module = nm1, paths = list(modulePath = modulePath))\n\n# Look at our model. This is \"like a list\"\nout1$model\n\n\n\nCall:\nlm(formula = y ~ x)\n\nCoefficients:\n(Intercept)            x  \n    -0.7062      -0.1268  \n\n\nWe add a second step, visualize it.\n\n\nCode\nnm2 &lt;- \"visualize\"\nnewModule(nm2, path = modulePath, open = FALSE,\n          events = list(\n            init = {\n              plot(sim$model)\n              return(sim)\n            }\n          )\n)\n\n\nAnd run both together:\n\n\nCode\nout2 &lt;- simInitAndSpades(module = c(nm1, nm2), paths = list(modulePath = modulePath))",
    "crumbs": [
      "SpaDES workflows and projects",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Simple workflow with 2 chunks</span>"
    ]
  },
  {
    "objectID": "workflowSimple1.html#see-also",
    "href": "workflowSimple1.html#see-also",
    "title": "10  Simple workflow with 2 chunks",
    "section": "10.2 See also",
    "text": "10.2 See also\n?SpaDES.project::setupProject\n?SpaDES.core::simInit\n?SpaDES.core::simInitAndSpaDES",
    "crumbs": [
      "SpaDES workflows and projects",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Simple workflow with 2 chunks</span>"
    ]
  },
  {
    "objectID": "workflowSimple2.html",
    "href": "workflowSimple2.html",
    "title": "11  Simple workflow with existing modules",
    "section": "",
    "text": "11.1 Installation\nCode\nrepos &lt;- c(\"predictiveecology.r-universe.dev\", getOption(\"repos\"))\nif (!require(\"SpaDES.project\"))\n  install.packages(c(\"SpaDES.project\", \"SpaDES.core\"), repos = repos)",
    "crumbs": [
      "SpaDES workflows and projects",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Simple workflow with existing modules</span>"
    ]
  },
  {
    "objectID": "workflowSimple2.html#using-setupproject",
    "href": "workflowSimple2.html#using-setupproject",
    "title": "11  Simple workflow with existing modules",
    "section": "11.2 Using setupProject",
    "text": "11.2 Using setupProject\nsetupProject does a series of very specific things, in a particular order, so that the chances of package conflicts and user errors are minimized.\nNote how it downloads the listed modules directly from their GitHub repositories (e.g. tati-micheletti/speciesAbundance)\n\n\nCode\n##################### PART II: Download the modules and install the needed packages\nSetup &lt;- SpaDES.project::setupProject(\n  \n  paths = list(projectPath = \"integratingSpaDESmodules\"),\n  \n  modules = c(\"tati-micheletti/speciesAbundance@main\",\n              \"tati-micheletti/temperature@main\",\n              \"tati-micheletti/speciesAbundTempLM@main\"),\n  \n  times = list(start = 2013,\n               end = 2014)\n  \n)\n\n\nThe output of setupProject is a list of argument values that can be passed to simInitAndSpaDES2 (with the “2” it accepts a list of arguments, instead of the arguments themselves).\n\n\nCode\nresults &lt;- SpaDES.core::simInitAndSpades2(Setup)\n\n\n\nDownloading: 15 B     \nDownloading: 15 B     \nDownloading: 10 kB     \nDownloading: 10 kB     \nDownloading: 11 kB     \nDownloading: 11 kB     \nDownloading: 19 kB     \nDownloading: 19 kB     \nDownloading: 35 kB     \nDownloading: 35 kB     \nDownloading: 43 kB     \nDownloading: 43 kB     \nDownloading: 47 kB     \nDownloading: 47 kB     \nDownloading: 63 kB     \nDownloading: 63 kB     \nDownloading: 73 kB     \nDownloading: 73 kB     \nDownloading: 79 kB     \nDownloading: 79 kB     \nDownloading: 96 kB     \nDownloading: 96 kB     \nDownloading: 110 kB     \nDownloading: 110 kB     \nDownloading: 120 kB     \nDownloading: 120 kB     \nDownloading: 130 kB     \nDownloading: 130 kB     \nDownloading: 150 kB     \nDownloading: 150 kB     \nDownloading: 160 kB     \nDownloading: 160 kB     \nDownloading: 180 kB     \nDownloading: 180 kB     \nDownloading: 190 kB     \nDownloading: 190 kB     \nDownloading: 200 kB     \nDownloading: 200 kB     \nDownloading: 220 kB     \nDownloading: 220 kB     \nDownloading: 230 kB     \nDownloading: 230 kB     \nDownloading: 250 kB     \nDownloading: 250 kB     \nDownloading: 280 kB     \nDownloading: 280 kB     \nDownloading: 300 kB     \nDownloading: 300 kB     \nDownloading: 310 kB     \nDownloading: 310 kB     \nDownloading: 360 kB     \nDownloading: 360 kB     \nDownloading: 440 kB     \nDownloading: 440 kB     \nDownloading: 520 kB     \nDownloading: 520 kB     \nDownloading: 570 kB     \nDownloading: 570 kB     \nDownloading: 570 kB     \nDownloading: 570 kB     \nDownloading: 15 B     \nDownloading: 15 B     \nDownloading: 21 kB     \nDownloading: 21 kB     \nDownloading: 33 kB     \nDownloading: 33 kB     \nDownloading: 34 kB     \nDownloading: 34 kB     \nDownloading: 48 kB     \nDownloading: 48 kB     \nDownloading: 100 kB     \nDownloading: 100 kB     \nDownloading: 110 kB     \nDownloading: 110 kB     \nDownloading: 230 kB     \nDownloading: 230 kB     \nDownloading: 240 kB     \nDownloading: 240 kB     \nDownloading: 250 kB     \nDownloading: 250 kB     \nDownloading: 260 kB     \nDownloading: 260 kB     \nDownloading: 270 kB     \nDownloading: 270 kB     \nDownloading: 290 kB     \nDownloading: 290 kB     \nDownloading: 310 kB     \nDownloading: 310 kB     \nDownloading: 330 kB     \nDownloading: 330 kB     \nDownloading: 340 kB     \nDownloading: 340 kB     \nDownloading: 360 kB     \nDownloading: 360 kB     \nDownloading: 380 kB     \nDownloading: 380 kB     \nDownloading: 400 kB     \nDownloading: 400 kB     \nDownloading: 410 kB     \nDownloading: 410 kB     \nDownloading: 460 kB     \nDownloading: 460 kB     \nDownloading: 640 kB     \nDownloading: 640 kB     \nDownloading: 650 kB     \nDownloading: 650 kB     \nDownloading: 660 kB     \nDownloading: 660 kB     \nDownloading: 660 kB     \nDownloading: 660 kB     \nDownloading: 760 kB     \nDownloading: 760 kB     \nDownloading: 760 kB     \nDownloading: 760 kB     \nDownloading: 770 kB     \nDownloading: 770 kB     \nDownloading: 780 kB     \nDownloading: 780 kB     \nDownloading: 780 kB     \nDownloading: 780 kB     \nDownloading: 840 kB     \nDownloading: 840 kB     \nDownloading: 880 kB     \nDownloading: 880 kB     \nDownloading: 890 kB     \nDownloading: 890 kB     \nDownloading: 890 kB     \nDownloading: 890 kB     \nDownloading: 900 kB     \nDownloading: 900 kB     \nDownloading: 940 kB     \nDownloading: 940 kB     \nDownloading: 960 kB     \nDownloading: 960 kB     \nDownloading: 970 kB     \nDownloading: 970 kB     \nDownloading: 990 kB     \nDownloading: 990 kB     \nDownloading: 990 kB     \nDownloading: 990 kB     \nDownloading: 1 MB     \nDownloading: 1 MB     \nDownloading: 1 MB     \nDownloading: 1 MB     \nDownloading: 1 MB     \nDownloading: 1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.1 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.2 MB     \nDownloading: 1.3 MB     \nDownloading: 1.3 MB     \nDownloading: 1.3 MB     \nDownloading: 1.3 MB     \nDownloading: 1.3 MB     \nDownloading: 1.3 MB     \nDownloading: 1.4 MB     \nDownloading: 1.4 MB     \nDownloading: 1.4 MB     \nDownloading: 1.4 MB     \nDownloading: 1.4 MB     \nDownloading: 1.4 MB     \nDownloading: 1.4 MB     \nDownloading: 1.4 MB     \nDownloading: 1.5 MB     \nDownloading: 1.5 MB     \nDownloading: 1.5 MB     \nDownloading: 1.5 MB     \nDownloading: 1.6 MB     \nDownloading: 1.6 MB     \nDownloading: 1.6 MB     \nDownloading: 1.6 MB     \nDownloading: 1.7 MB     \nDownloading: 1.7 MB     \nDownloading: 1.7 MB     \nDownloading: 1.7 MB     \nDownloading: 1.7 MB     \nDownloading: 1.7 MB     \nDownloading: 1.7 MB     \nDownloading: 1.7 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.8 MB     \nDownloading: 1.9 MB     \nDownloading: 1.9 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.1 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.2 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.3 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.4 MB     \nDownloading: 2.5 MB     \nDownloading: 2.5 MB     \nDownloading: 2.5 MB     \nDownloading: 2.5 MB     \nDownloading: 2.7 MB     \nDownloading: 2.7 MB     \nDownloading: 2.7 MB     \nDownloading: 2.7 MB     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nSpaDES.core::completed(results)\n\n\n    eventTime         moduleName      eventType eventPriority\n        &lt;num&gt;             &lt;char&gt;         &lt;char&gt;         &lt;num&gt;\n 1:      2013         checkpoint           init             0\n 2:      2013               save           init             0\n 3:      2013           progress           init             0\n 4:      2013               load           init             0\n 5:      2013   speciesAbundance           init             1\n 6:      2013        temperature           init             1\n 7:      2013 speciesAbundTempLM           init             1\n 8:      2013   speciesAbundance tableToRasters             5\n 9:      2013   speciesAbundance           plot             5\n10:      2013        temperature   dataToRaster             5\n11:      2013        temperature       plotting             5\n12:      2013 speciesAbundTempLM  tableBuilding             5\n13:      2014   speciesAbundance tableToRasters             5\n14:      2014        temperature   dataToRaster             5\n15:      2014 speciesAbundTempLM  tableBuilding             5\n    ._prevEventTimeFinish           clockTime\n                   &lt;POSc&gt;              &lt;POSc&gt;\n 1:   2024-06-04 11:58:20 2024-06-04 11:58:20\n 2:   2024-06-04 11:58:20 2024-06-04 11:58:20\n 3:   2024-06-04 11:58:20 2024-06-04 11:58:20\n 4:   2024-06-04 11:58:20 2024-06-04 11:58:20\n 5:   2024-06-04 11:58:20 2024-06-04 11:58:20\n 6:   2024-06-04 11:58:20 2024-06-04 11:58:20\n 7:   2024-06-04 11:58:20 2024-06-04 11:58:20\n 8:   2024-06-04 11:58:20 2024-06-04 11:58:20\n 9:   2024-06-04 11:58:20 2024-06-04 11:58:20\n10:   2024-06-04 11:58:20 2024-06-04 11:58:20\n11:   2024-06-04 11:58:20 2024-06-04 11:58:20\n12:   2024-06-04 11:58:20 2024-06-04 11:58:20\n13:   2024-06-04 11:58:20 2024-06-04 11:58:20\n14:   2024-06-04 11:58:20 2024-06-04 11:58:20\n15:   2024-06-04 11:58:20 2024-06-04 11:58:20",
    "crumbs": [
      "SpaDES workflows and projects",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Simple workflow with existing modules</span>"
    ]
  },
  {
    "objectID": "workflowSimple2.html#examples",
    "href": "workflowSimple2.html#examples",
    "title": "11  Simple workflow with existing modules",
    "section": "11.3 Examples",
    "text": "11.3 Examples\nIn the remainding chapters of this section, we will explore several examples, including learning of several arguments to the function setupProject. But we will start very simple first.\n\n\nCode\n.libPaths(libPath)",
    "crumbs": [
      "SpaDES workflows and projects",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Simple workflow with existing modules</span>"
    ]
  },
  {
    "objectID": "multipleModules.html",
    "href": "multipleModules.html",
    "title": "12  Multiple Modules",
    "section": "",
    "text": "Under construction.",
    "crumbs": [
      "SpaDES workflows and projects",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multiple Modules</span>"
    ]
  },
  {
    "objectID": "realexamples.html",
    "href": "realexamples.html",
    "title": "“Real-world” examples of SpaDES workflows",
    "section": "",
    "text": "This section will take you through several “real-world” examples that use SpaDES to build and execute a workflow. By “real-world” we mean workflows that use models that have been/are used in research or application.\nBecause we will not explain each model or the SpaDES modules in detail, we encourage learning more about these models from the sources noted in the chapters.\nIn this section we assume that readers are familiar with SpaDES, namely creating and using SpaDES modules. If not, we encourage going through the chapters in SpaDES 101.",
    "crumbs": [
      "\"Real-world\" examples of `SpaDES` workflows"
    ]
  },
  {
    "objectID": "castorExample.html",
    "href": "castorExample.html",
    "title": "13  Castor workflow with setupProject",
    "section": "",
    "text": "13.1 Workflow setup\nSpaDES.project functions expect SpaDES modules to either exist locally, or at root level of separate repositories. This is not the case with Castor modules, which are in a nested folder (i.e. a folder in a folder tree) of a single GitHub repository.\nSpaDES.project will eventually be able to deal with this1, but for now we work around this issue by using a custom function called getCastorModulesAndDB. This function will also download the demo SQLite database from Google Drive2. You’ll be prompted to authorise this operation and a browser window will open for this. Make sure you give tidyverse read/write access to your files:\nFigure 13.1\nAfter the “workaround” setupProject does all the heavy-lifting of setting up the workflow, namely installing all package dependencies listed in the several modules and in setupProject(..., packages), creating all the necessary folders, sourcing additional files and creating parameter, inputs and outputs lists – see ?setupProject.\nCode\n## install/load necessary packages\nrepos &lt;- c(\"predictiveecology.r-universe.dev\", getOption(\"repos\"))\ninstall.packages(c(\"SpaDES.project\", \"googledrive\", \"reproducible\"), \n                 repos = repos, dependencies = TRUE)\nlibrary(SpaDES.project)\n\n## get Castor modules and functions\nsetupFunctions(paths = list(\"projectPath\" = \"~/\"),\n               functions = c(\"PredictiveEcology/PredictiveEcology.org@main/tutos/castorExample/getCastorModulesAndDB.R\",\n                             \"PredictiveEcology/PredictiveEcology.org@main/tutos/castorExample/params.R\"),\n               overwrite = TRUE)\noutMod &lt;- getCastorModulesAndDB(paths = list(\"modulePath\" = \"~/tutos/castorExample/modules/\",\n                                             \"projectPath\" = \"~/tutos/castorExample\"),\n                                modules = c(\"dataCastor\", \n                                            \"growingStockCastor\", \n                                            \"forestryCastor\", \n                                            \"blockingCastor\"),\n                                dbURL = \"https://drive.google.com/file/d/1-2POunzC7aFbkKK5LeBJNsFYMBBY8dNx/view?usp=sharing\",\n                                dbPath = \"~/tutos/castorExample/R/scenarios/comparison_stsm\")\n\n## set up the workflow paths, dependencies and modules\n## as well as simulation parameters, (some) inputs and outputs\nout &lt;- setupProject(\n  paths = list(\"inputPath\" = \"modules/forestryCastor/inputs\",\n               \"outputPath\" = \"R/scenarios/comparison_stsm/outputs\",\n               \"modulePath\" = \"modules/\",\n               \"cachePath\" = \"modules/forestryCastor\",\n               \"projectPath\" = \"~/tutos/castorExample\"),\n  modules = names(outMod$modules),\n  options = list(repos = repos),\n  functions = \"bcgov/castor@main/R/functions/R_Postgres.R\",\n  ## install and load\n  require = \"dplyr\",\n  ## install but don't load these:\n  packages = c(\n    \"DBI\", \n    \"DiagrammeR\",\n    \"keyring\",\n    \"rgdal\", \n    \"RPostgreSQL\", \n    \"sp\",\n    \"terra\"\n  ),\n  params = \"params.R\",\n  times = list(start = 0, end = 20),\n  outputs = {\n    data.frame(objectName = c(\"harvestReport\",\n                              \"growingStockReport\"))\n  },\n  scenario = {\n    data.table(name = \"stsm_base_case\",\n               description = paste(\"Priority queue = oldest first. Adjacency constraint\",\n                                   \"= None. Includes roads (mst) and blocks (pre).\",\n                                   \"Harvest flow = 147,300 m3/year in decade 1, 133,500\",\n                                   \"m3/year in decade 2, 132,300 m3/year in decades 3 to\",\n                                   \"14 and 135,400 m3/year in decades 15 to 25.\",\n                                   \"Minimum harvest age = 80 and minimum harvest volume = 150\"))\n  },\n  harvestFlow = {\n    rbindlist(list(data.table(compartment = \"tsa99\",\n                              partition = ' age &gt; 79 AND vol &gt; 149 ', \n                              period = rep( seq (from = 1,\n                                                 to = 1, \n                                                 by = 1),\n                                            1), \n                              flow = 1473000, \n                              partition_type = 'live'),\n                   data.table(compartment = \"tsa99\",\n                              partition = ' age &gt; 79 AND vol &gt; 149 ', \n                              period = rep( seq (from = 2,\n                                                 to = 2, \n                                                 by = 1),\n                                            1), \n                              flow = 1335000, \n                              partition_type = 'live'),\n                   data.table(compartment = \"tsa99\",\n                              partition = ' age &gt; 79 AND vol &gt; 149 ', \n                              period = rep( seq (from = 3,\n                                                 to = 14, \n                                                 by = 1),\n                                            1), \n                              flow = 1323000, \n                              partition_type = 'live'),\n                   data.table(compartment = \"tsa99\",\n                              partition = ' age &gt; 79 AND vol &gt; 149 ', \n                              period = rep( seq (from = 15,\n                                                 to = 25, \n                                                 by = 1),\n                                            1), \n                              flow = 1354000, \n                              partition_type = 'live')  \n    ))\n  },\n  Restart = TRUE\n)",
    "crumbs": [
      "\"Real-world\" examples of `SpaDES` workflows",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Castor workflow with `setupProject`</span>"
    ]
  },
  {
    "objectID": "castorExample.html#initialise-the-model-and-inspect-simlist",
    "href": "castorExample.html#initialise-the-model-and-inspect-simlist",
    "title": "13  Castor workflow with setupProject",
    "section": "13.2 Initialise the model and inspect simList",
    "text": "13.2 Initialise the model and inspect simList\nsetupProject() returns a names list containing values that can be passed as argument to simInit()3.\nWe use do.call() to pass the whole list of arguments to simInit.\n\n\nCode\n## initialize simulation\ncastorInit &lt;- do.call(SpaDES.core::simInit, out)\n\n\nAnother (more verbose) option would to call simInit directly:\n\n\nCode\ncastorInit &lt;- SpaDES.core::simInit(\n  times = out$times,\n  params = out$params, \n  modules = out$modules, \n  objects = list(scenario = out$scenario, \n                 harvestFlow = out$harvestFlow)\n)\n\n\nUse the following functions to access workflow/model properties. events(), for instance will output the scheduled events, which at this point are only the init events of each module as you can see in the output below.\n\n\nCode\n## inspect the `simList`\nSpaDES.core::params(castorInit) \nSpaDES.core::inputs(castorInit)\nSpaDES.core::outputs(castorInit)\nSpaDES.core::times(castorInit) \n\n## scheduled events\nSpaDES.core::events(castorInit) \n\n\n\n\n   eventTime         moduleName eventType eventPriority\n       &lt;num&gt;             &lt;char&gt;    &lt;char&gt;         &lt;num&gt;\n1:         0         checkpoint      init             0\n2:         0               save      init             0\n3:         0           progress      init             0\n4:         0               load      init             0\n5:         0         dataCastor      init             1\n6:         0 growingStockCastor      init             1\n7:         0     forestryCastor      init             1\n8:         0     blockingCastor      init             1",
    "crumbs": [
      "\"Real-world\" examples of `SpaDES` workflows",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Castor workflow with `setupProject`</span>"
    ]
  },
  {
    "objectID": "castorExample.html#visualize-the-workflow",
    "href": "castorExample.html#visualize-the-workflow",
    "title": "13  Castor workflow with setupProject",
    "section": "13.3 Visualize the workflow",
    "text": "13.3 Visualize the workflow\nmoduleDiagram() and objectDiagram() are great to visualise how each module interacts with the other. Recall that these interactions arise from object “exchanges” between modules, which are deduced by simInit() from module metadata (Figure 13.3) – i.e., if a module’s inputs are another’s outputs, then the first module will follow the second.\n\n\nCode\nSpaDES.core::moduleDiagram(castorInit)\nSpaDES.core::objectDiagram(castorInit)\n\n\n\n\n\n\n\n\n\n\nFigure 13.2: Diagram of module connections.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 13.3: Diagram of module inter-dependencies with object names.",
    "crumbs": [
      "\"Real-world\" examples of `SpaDES` workflows",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Castor workflow with `setupProject`</span>"
    ]
  },
  {
    "objectID": "castorExample.html#run-simulation",
    "href": "castorExample.html#run-simulation",
    "title": "13  Castor workflow with setupProject",
    "section": "13.4 Run simulation",
    "text": "13.4 Run simulation\nspades() runs the simulation, beginning with the execution of the init events. Notice how the result of outputs() differs from previously.\n\n\nCode\ncastorSim &lt;- SpaDES.core::spades(castorInit)\n\n## we now have outputs\nSpaDES.core::outputs(castorSim)\n\n\n\n\n          objectName\n1      harvestReport\n2 growingStockReport\n                                                                                                              file\n1      C:/Users/cbarros/Documents/tutos/castorExample/R/scenarios/comparison_stsm/outputs/harvestReport_year20.rds\n2 C:/Users/cbarros/Documents/tutos/castorExample/R/scenarios/comparison_stsm/outputs/growingStockReport_year20.rds\n      fun package saveTime saved arguments\n1 saveRDS    base       20  TRUE        NA\n2 saveRDS    base       20  TRUE        NA\n\n\ncompleted(castorSim) shows the chaining of events that was produced and run by spades(). The sequence of steps in the workflow therefore arises from each module’s events and their scheduling, rather than being explicitly imposed by the user.\n\n\nCode\nSpaDES.core::completed(castorSim)\n\n\n    eventTime         moduleName          eventType eventPriority\n        &lt;num&gt;             &lt;char&gt;             &lt;char&gt;         &lt;num&gt;\n 1:         0         checkpoint               init             0\n 2:         0               save               init             0\n 3:         0           progress               init             0\n 4:         0               load               init             0\n 5:         0         dataCastor               init             1\n 6:         0 growingStockCastor               init             1\n 7:         0     forestryCastor               init             1\n 8:         0     blockingCastor               init             1\n....\n\n\nWe suggest omitting the blockingCastor module in setupProject() and rerunning the workflow again to see how spades is capable of re-generating a new workflow with little effort from the user.\n\n\nCode\nmodules &lt;- c(\"dataCastor\", \n             \"growingStockCastor\", \n             \"forestryCastor\")\n\nout &lt;- setupProject(\n  paths = list(\"inputPath\" = \"modules/forestryCastor/inputs\",\n               \"outputPath\" = \"/R/scenarios/comparison_stsm/outputs\",\n               \"modulePath\" = \"modules/\",\n               \"cachePath\" = \"modules/forestryCastor\",\n               \"projectPath\" = \"~/tutos/castorExample/\"),\n  modules = modules,\n  functions = \"bcgov/castor@main/R/functions/R_Postgres.R\",\n  ## install and load\n  require = \"dplyr\",\n  ## install but don't load these:\n  packages = c(\n    \"DBI\", \n    \"keyring\",\n    \"rgdal\", \n    \"RPostgreSQL\", \n    \"sp\",\n    \"terra\"\n  ),\n  params = \"params.R\",\n  times = list(start = 0, end = 20),\n  outputs = {\n    data.frame(objectName = c(\"harvestReport\",\n                              \"growingStockReport\"))\n  },\n  scenario = {\n    data.table(name = \"stsm_base_case\",\n               description = paste(\"Priority queue = oldest first. Adjacency constraint\",\n                                   \"= None. Includes roads (mst) and blocks (pre).\",\n                                   \"Harvest flow = 147,300 m3/year in decade 1, 133,500\",\n                                   \"m3/year in decade 2, 132,300 m3/year in decades 3 to\",\n                                   \"14 and 135,400 m3/year in decades 15 to 25.\",\n                                   \"Minimum harvest age = 80 and minimum harvest volume = 150\"))\n  },\n  harvestFlow = {\n    rbindlist(list(data.table(compartment = \"tsa99\",\n                              partition = ' age &gt; 79 AND vol &gt; 149 ', \n                              period = rep( seq (from = 1,\n                                                 to = 1, \n                                                 by = 1),\n                                            1), \n                              flow = 1473000, \n                              partition_type = 'live'),\n                   data.table(compartment = \"tsa99\",\n                              partition = ' age &gt; 79 AND vol &gt; 149 ', \n                              period = rep( seq (from = 2,\n                                                 to = 2, \n                                                 by = 1),\n                                            1), \n                              flow = 1335000, \n                              partition_type = 'live'),\n                   data.table(compartment = \"tsa99\",\n                              partition = ' age &gt; 79 AND vol &gt; 149 ', \n                              period = rep( seq (from = 3,\n                                                 to = 14, \n                                                 by = 1),\n                                            1), \n                              flow = 1323000, \n                              partition_type = 'live'),\n                   data.table(compartment = \"tsa99\",\n                              partition = ' age &gt; 79 AND vol &gt; 149 ', \n                              period = rep( seq (from = 15,\n                                                 to = 25, \n                                                 by = 1),\n                                            1), \n                              flow = 1354000, \n                              partition_type = 'live')  \n    ))\n  },\n  Restart = TRUE\n)\n\n## initialize and run simulation in one go\ncastorSim2 &lt;- do.call(SpaDES.core::simInitAndSpades, out)",
    "crumbs": [
      "\"Real-world\" examples of `SpaDES` workflows",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Castor workflow with `setupProject`</span>"
    ]
  },
  {
    "objectID": "castorExample.html#footnotes",
    "href": "castorExample.html#footnotes",
    "title": "13  Castor workflow with setupProject",
    "section": "",
    "text": "SpaDES.project is currently being adapted to deal with modules nested in folders of GitHub repositories (instead of living in their own GitHub repositories). Hence, the code in this example is subject to changes in the near future.↩︎\nUsing the googledrive R package. See ?googledrive::drive_auth for more information.↩︎\nSee also Chapter 7.↩︎",
    "crumbs": [
      "\"Real-world\" examples of `SpaDES` workflows",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Castor workflow with `setupProject`</span>"
    ]
  },
  {
    "objectID": "bestPractices.html",
    "href": "bestPractices.html",
    "title": "14  Best practices for \\(R^3T\\) workflows",
    "section": "",
    "text": "14.1 General best practices\n::: {.callout-tip collapse = “false”} Not a very useful comment (we can check ?lm):\nCode\n## lm fits a linear model\nlm(biomass ~ height)\nA more useful comment (we can check ?lm):\nCode\n## model linear relationship between biomass and height\nlm(biomass ~ height)\n:::\n!Functions and modules as key tools for \\(R^3T\\), but also for building integrated and continuous workflows; McIntire et al. (2022)",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Best practices for $R^3T$ workflows</span>"
    ]
  },
  {
    "objectID": "bestPractices.html#general-best-practices",
    "href": "bestPractices.html#general-best-practices",
    "title": "14  Best practices for \\(R^3T\\) workflows",
    "section": "",
    "text": "Script, script, script – this means script everything you do, including package installation;\n“DOComment” your code – use comments that describe the intention of the code, not necessarily a code translation into human language:\n\n\n\n\n\n\n\nMinimize the number of software/languages used – the more jumps between languages/software the less robust and reproducible the workflow is. Remember: other users will need to install the same software and be able to the same jumps/operations that you did without you looking over their shoulder.\nModularise and “functionise” – avoid loooooong scripts, which are harder to read, learn and debug.\nSpaDES helps the modularisation part a great deal but it is still up to the developer to create functions and to decide what workflow components can/should be broken into separate modules or events;\nWhen using embedded module and event caching, think about what workflow steps can be cached to speed up development and re-runs and consider turning these into separate modules or events;\nConsider “packaging” your functions so they can be used across projects and SpaDES modules.\n\n\n\nCentralize workflow in a single script – this is quite intuitive when using SpaDES, as usually there is a “controller” script that sets up and runs the workflow.\nUse project-oriented and self-contained workflows – pick a structure that is self-explanatory and make sure that the project can be “moved” between users/machines without changing the code.\nDon’t use absolute paths – use relative paths (relative to project directory) – RStudio Projects and SpaDES.project do this automatically.\nYou can even install your R packages into project-level libraries, to allow for different package versions between projects in the same machine\nVersion control – great for collaboration, great for tracking changes, great to recover old versions of a project/code\nTest (!) – test your code and your workflow if you want them to endure and persist through time and users\nUse a combination of assertions, unit tests and integration tests1",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Best practices for $R^3T$ workflows</span>"
    ]
  },
  {
    "objectID": "bestPractices.html#best-practices-for-spades-workflows",
    "href": "bestPractices.html#best-practices-for-spades-workflows",
    "title": "14  Best practices for \\(R^3T\\) workflows",
    "section": "14.2 Best practices for SpaDES workflows",
    "text": "14.2 Best practices for SpaDES workflows\n\nlimit the number of objects in .GlobalEnv. Instead, put them in functions – such as with setupProject as arguments – or inside a module. When objects are in modules, you can add default object values (e.g. via .inputObjects), or save them into files that are loaded by setupProject or simInit. See\n\n\n\n\n\nWhy not? There are many reasons why things can get messed up with modelling in R… e.g., package dependency issues (especially version numbers that collide during development stages), internet availability, modules finding objects in the .GlobalEnv when they shouldn’t, etc… SpaDES.project::setupProject and simInit deal with these issues by loading and using namespaces/packages and objects directly into a separate environment (the simList).\nDon’t install packages “manually” and “separately” – script package installation in a reproducible way, i.e. that includes reference to package versions. Even better, let setupProject deal with package installation\nWhy not? When you have many modules, each with a list of packages it needs it will be hard to figure out what packages need to be installed or updated. setupProject was designed to deal with this issue using the Require package.\nDon’t pre-load packages – let simInit do it when the simulation is being initialized and only after it has asserted that packages are available and in the correct versions.\nWhy not? There are many reasons why things can get messed up with modelling in R… e.g., package dependency issues (especially version numbers that collide during development stages), internet availability. Pre-loading a package prevents it from being updated, which can make setupProject (and simInit) fail if they attempt to update a package to respect module requirements.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Best practices for $R^3T$ workflows</span>"
    ]
  },
  {
    "objectID": "bestPractices.html#see-also",
    "href": "bestPractices.html#see-also",
    "title": "14  Best practices for \\(R^3T\\) workflows",
    "section": "14.3 See also",
    "text": "14.3 See also\nEFI’s reproducible forecasting workflows\nThe Practice of Reproducible Research\nAdvanced R - Style guide; by Hadley Wickham\nTypes of testing; by Codecov\nPaper by Sarma et al. Sarma et al. (2016) on code testing\n\n\n\n\nSarma, Gopal P., Travis W. Jacobs, Mark D. Watts, S. Vahid Ghayoomie, Stephen D. Larson, and Richard C. Gerkin. 2016. “Unit Testing, Model Validation, and Biological Simulation.” F1000Research 5 (August): 1946. https://doi.org/10.12688/f1000research.9315.1.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Best practices for $R^3T$ workflows</span>"
    ]
  },
  {
    "objectID": "bestPractices.html#footnotes",
    "href": "bestPractices.html#footnotes",
    "title": "14  Best practices for \\(R^3T\\) workflows",
    "section": "",
    "text": "Assertions and unit tests are smaller and generally test specific operations within a workflow (e.g. if (1 + x != 2) stop(\"there is an error\")) or things like object integrity (e.g. if (!is(x, \"data.frame\") stop(\"there is an error\")). Integration tests are larger in the sense that they test many components of a workflow and whether they work well together (they can also test an entire workflow)↩︎",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Best practices for $R^3T$ workflows</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Barros, Ceres, Yong Luo, Alex M. Chubaty, Ian M. S. Eddy, Tatiane\nMicheletti, Céline Boisvenue, David W. Andison, Steven G. Cumming, and\nEliot J. B. McIntire. 2023. “Empowering Ecological Modellers with\na PERFICT Workflow: Seamlessly Linking Data, Parameterisation,\nPrediction, Validation and Visualisation.” Methods in Ecology\nand Evolution 14 (1): 173–88. https://doi.org/10.1111/2041-210X.14034.\n\n\nSarma, Gopal P., Travis W. Jacobs, Mark D. Watts, S. Vahid Ghayoomie,\nStephen D. Larson, and Richard C. Gerkin. 2016. “Unit Testing,\nModel Validation, and Biological Simulation.”\nF1000Research 5 (August): 1946. https://doi.org/10.12688/f1000research.9315.1.",
    "crumbs": [
      "References"
    ]
  }
]